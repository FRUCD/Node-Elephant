Loading plugins phase: Elapsed time ==> 0s.332ms
Initializing data phase: Elapsed time ==> 1s.759ms
<CYPRESSTAG name="CyDsfit arguments...">
cydsfit arguments: -.fdsnotice -.fdswarpdepfile=warp_dependencies.txt -.fdselabdepfile=elab_dependencies.txt -.fdsbldfile=generated_files.txt -p C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -d CY8C5868AXI-LP035 -s C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Generated_Source\PSoC5 -- -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE</CYPRESSTAG>
<CYPRESSTAG name="Design elaboration results...">
ADD: sdb.M0065: information: Analog terminal "vdac_ref" on ADC_SAR_SEQ_v1_10 is unconnected.
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Signal: vdac_ref)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_798)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_885)

ADD: sdb.M0065: information: Analog terminal "AMuxHw_1.BoutTerm" on ADC_SAR_SEQ_v1_10 is unconnected.
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Signal: V_diff1)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_302)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_387)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_458.136)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_533)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v1_10\PSoC5\ADC_SAR_SEQ_v1_10.cysch (Shape_598)

</CYPRESSTAG>
Elaboration phase: Elapsed time ==> 3s.513ms
<CYPRESSTAG name="HDL generation results...">
</CYPRESSTAG>
HDL generation phase: Elapsed time ==> 0s.096ms
<CYPRESSTAG name="Synthesis results...">

     | | | | | | |
   _________________
  -|               |-
  -|               |-
  -|               |-
  -|    CYPRESS    |-
  -|               |-
  -|               |-   Warp Verilog Synthesis Compiler: Version 6.3 IR 41
  -|               |-   Copyright (C) 1991-2001 Cypress Semiconductor
   |_______________|
     | | | | | | |

======================================================================
Compiling:  Node-Elephant.v
Program  :   C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\bin/warp.exe
Options  :    -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -dcpsoc3 Node-Elephant.v -verilog
======================================================================

======================================================================
Compiling:  Node-Elephant.v
Program  :   C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\bin/warp.exe
Options  :    -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -dcpsoc3 Node-Elephant.v -verilog
======================================================================

======================================================================
Compiling:  Node-Elephant.v
Program  :   vlogfe
Options  :    -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -dcpsoc3 -verilog Node-Elephant.v
======================================================================

vlogfe V6.3 IR 41:  Verilog parser
Fri Dec 12 20:34:21 2014


======================================================================
Compiling:  Node-Elephant.v
Program  :   vpp
Options  :    -yv2 -q10 Node-Elephant.v
======================================================================

vpp V6.3 IR 41:  Verilog Pre-Processor
Fri Dec 12 20:34:21 2014

Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v1_10\ADC_AMUX_v1_10.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v1_10\bADC_SAR_SEQ_v1_10.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\B_Timer_v2_60\B_Timer_v2_60.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\OneTerminal\OneTerminal.v'

vpp:  No errors.

Library 'work' => directory 'lcpsoc3'
General_symbol_table
General_symbol_table
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Using control file 'Node-Elephant.ctl'.
Node-Elephant.v (line 682, col 82):  Note: Substituting module 'cmp_vv_vv' for '='.
C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\B_Timer_v2_60\B_Timer_v2_60.v (line 368, col 46):  Note: Substituting module 'cmp_vv_vv' for '='.
C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\B_Timer_v2_60\B_Timer_v2_60.v (line 374, col 62):  Note: Substituting module 'add_vv_vv' for '+'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3pkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3.vif'.

vlogfe:  No errors.


======================================================================
Compiling:  Node-Elephant.v
Program  :   tovif
Options  :    -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -dcpsoc3 -verilog Node-Elephant.v
======================================================================

tovif V6.3 IR 41:  High-level synthesis
Fri Dec 12 20:34:22 2014

Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Linking 'C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\codegentemp\Node-Elephant.ctl'.
Linking 'C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\codegentemp\Node-Elephant.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v1_10\ADC_AMUX_v1_10.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v1_10\bADC_SAR_SEQ_v1_10.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\B_Timer_v2_60\B_Timer_v2_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\OneTerminal\OneTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3pkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mcompare.vif'.

tovif:  No errors.


======================================================================
Compiling:  Node-Elephant.v
Program  :   topld
Options  :    -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -dcpsoc3 -verilog Node-Elephant.v
======================================================================

topld V6.3 IR 41:  Synthesis and optimization
Fri Dec 12 20:34:22 2014

Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Linking 'C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\codegentemp\Node-Elephant.ctl'.
Linking 'C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\codegentemp\Node-Elephant.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v1_10\ADC_AMUX_v1_10.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cypress.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v1_10\bADC_SAR_SEQ_v1_10.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\B_Timer_v2_60\B_Timer_v2_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\OneTerminal\OneTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3pkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\cy_psoc3.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\common\stdlogic\mcompare.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\lib\lcpsoc3\stdlogic\cpsoc3.vif'.

----------------------------------------------------------
Detecting unused logic.
----------------------------------------------------------
    User names
	\ADC_SAR:bSAR_SEQ:sw_soc\
	\ADC_SAR:soc_out\
	\ADC_SAR:Net_3905\
	\ADC_SAR:Net_3867\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_2\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_2\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_1\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_1\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_0\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_0\
	\ADC_SAR:MODULE_1:g1:a0:xneq\
	\ADC_SAR:MODULE_1:g1:a0:xlt\
	\ADC_SAR:MODULE_1:g1:a0:xlte\
	\ADC_SAR:MODULE_1:g1:a0:xgt\
	\ADC_SAR:MODULE_1:g1:a0:xgte\
	\ADC_SAR:MODULE_1:lt\
	\ADC_SAR:MODULE_1:gt\
	\ADC_SAR:MODULE_1:gte\
	\ADC_SAR:MODULE_1:lte\
	\ADC_SAR:MODULE_1:neq\
	\Timer:Net_260\
	Net_1042
	\Timer:Net_53\
	\Timer:TimerUDB:ctrl_ten\
	\Timer:TimerUDB:ctrl_cmode_0\
	\Timer:TimerUDB:ctrl_tmode_1\
	\Timer:TimerUDB:ctrl_tmode_0\
	\Timer:TimerUDB:ctrl_ic_1\
	\Timer:TimerUDB:ctrl_ic_0\
	Net_1041
	\Timer:TimerUDB:zeros_3\
	\Timer:TimerUDB:zeros_2\
	\Timer:Net_102\
	\Timer:Net_266\
	Net_716
	\CAN:Net_30\


Deleted 36 User equations/components.
Deleted 0 Synthesized equations/components.

------------------------------------------------------
Alias Detection
------------------------------------------------------
Aliasing \LCD:tmpOE__LCDPort_net_5\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \LCD:tmpOE__LCDPort_net_4\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \LCD:tmpOE__LCDPort_net_3\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \LCD:tmpOE__LCDPort_net_2\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \LCD:tmpOE__LCDPort_net_1\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \LCD:tmpOE__LCDPort_net_0\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing one to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Brake_2_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Brake_1_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Throttle_2_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Throttle_1_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_enable\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \ADC_SAR:SAR:vp_ctl_0\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_2\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_1\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_3\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_1\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_3\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_0\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_2\ to zero
Aliasing \ADC_SAR:SAR:soc\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_7\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_6\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_5\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_4\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_3\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_2\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_1\ to zero
Aliasing Net_1094 to \ADC_SAR:bSAR_SEQ:status_0\
Aliasing \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_0\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Steering_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Button_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing \Timer:TimerUDB:ctrl_cmode_1\ to zero
Aliasing \Timer:TimerUDB:trigger_enable\ to \LCD:tmpOE__LCDPort_net_6\
Aliasing \Timer:TimerUDB:status_6\ to zero
Aliasing \Timer:TimerUDB:status_5\ to zero
Aliasing \Timer:TimerUDB:status_4\ to zero
Aliasing \Timer:TimerUDB:status_0\ to \Timer:TimerUDB:tc_i\
Aliasing Net_12 to zero
Aliasing tmpOE__LED_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Rx_1_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing tmpOE__Tx_1_net_0 to \LCD:tmpOE__LCDPort_net_6\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_5\\D\ to \ADC_SAR:MODIN1_5\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_4\\D\ to \ADC_SAR:MODIN1_4\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_3\\D\ to \ADC_SAR:MODIN1_3\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_2\\D\ to \ADC_SAR:MODIN1_2\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_1\\D\ to \ADC_SAR:MODIN1_1\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_0\\D\ to \ADC_SAR:MODIN1_0\
Aliasing \ADC_SAR:bSAR_SEQ:bus_clk_reg\\D\ to \ADC_SAR:bSAR_SEQ:comp_clk_reg\\D\
Aliasing \Timer:TimerUDB:capture_last\\D\ to zero
Aliasing \Timer:TimerUDB:hwEnable_reg\\D\ to \Timer:TimerUDB:run_mode\
Aliasing \Timer:TimerUDB:capture_out_reg_i\\D\ to \Timer:TimerUDB:capt_fifo_load_int\
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_5\[2] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_4\[3] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_3\[4] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_2\[5] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_1\[6] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_0\[7] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Rhs of wire one[24] = \LCD:tmpOE__LCDPort_net_6\[1]
Removing Lhs of wire tmpOE__Brake_2_net_0[27] = one[24]
Removing Lhs of wire tmpOE__Brake_1_net_0[34] = one[24]
Removing Lhs of wire tmpOE__Throttle_2_net_0[41] = one[24]
Removing Lhs of wire tmpOE__Throttle_1_net_0[48] = one[24]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_enable\[54] = one[24]
Removing Lhs of wire \ADC_SAR:cmp_vv_vv_MODGEN_1\[56] = \ADC_SAR:MODULE_1:g1:a0:xeq\[378]
Removing Rhs of wire \ADC_SAR:clock\[57] = \ADC_SAR:Net_3874\[280]
Removing Rhs of wire \ADC_SAR:ch_addr_5\[59] = \ADC_SAR:bSAR_SEQ:count_5\[249]
Removing Rhs of wire \ADC_SAR:ch_addr_4\[61] = \ADC_SAR:bSAR_SEQ:count_4\[250]
Removing Rhs of wire \ADC_SAR:ch_addr_3\[63] = \ADC_SAR:bSAR_SEQ:count_3\[251]
Removing Rhs of wire \ADC_SAR:ch_addr_2\[65] = \ADC_SAR:bSAR_SEQ:count_2\[252]
Removing Rhs of wire \ADC_SAR:ch_addr_1\[67] = \ADC_SAR:bSAR_SEQ:count_1\[253]
Removing Rhs of wire \ADC_SAR:ch_addr_0\[69] = \ADC_SAR:bSAR_SEQ:count_0\[254]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_0\[199] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_2\[200] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_1\[201] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_3\[202] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_1\[203] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_3\[204] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_0\[205] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_2\[206] = zero[8]
Removing Lhs of wire \ADC_SAR:SAR:Net_188\[207] = \ADC_SAR:clock\[57]
Removing Lhs of wire \ADC_SAR:SAR:soc\[213] = zero[8]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:enable\[241] = \ADC_SAR:bSAR_SEQ:control_0\[242]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:load_period\[243] = \ADC_SAR:bSAR_SEQ:control_1\[244]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_7\[255] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_6\[256] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_5\[257] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_4\[258] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_3\[259] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_2\[260] = zero[8]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_1\[261] = zero[8]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:status_0\[262] = \ADC_SAR:bSAR_SEQ:comp_clk_reg\[263]
Removing Rhs of wire Net_1094[268] = \ADC_SAR:bSAR_SEQ:status_0\[262]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_5\[289] = \ADC_SAR:MODIN1_5\[290]
Removing Lhs of wire \ADC_SAR:MODIN1_5\[290] = \ADC_SAR:ch_addr_5\[59]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_4\[291] = \ADC_SAR:MODIN1_4\[292]
Removing Lhs of wire \ADC_SAR:MODIN1_4\[292] = \ADC_SAR:ch_addr_4\[61]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_3\[293] = \ADC_SAR:MODIN1_3\[294]
Removing Lhs of wire \ADC_SAR:MODIN1_3\[294] = \ADC_SAR:ch_addr_3\[63]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_2\[295] = \ADC_SAR:MODIN1_2\[296]
Removing Lhs of wire \ADC_SAR:MODIN1_2\[296] = \ADC_SAR:ch_addr_2\[65]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_1\[297] = \ADC_SAR:MODIN1_1\[298]
Removing Lhs of wire \ADC_SAR:MODIN1_1\[298] = \ADC_SAR:ch_addr_1\[67]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_0\[299] = \ADC_SAR:MODIN1_0\[300]
Removing Lhs of wire \ADC_SAR:MODIN1_0\[300] = \ADC_SAR:ch_addr_0\[69]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_5\[301] = \ADC_SAR:MODIN2_5\[302]
Removing Lhs of wire \ADC_SAR:MODIN2_5\[302] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[58]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_4\[303] = \ADC_SAR:MODIN2_4\[304]
Removing Lhs of wire \ADC_SAR:MODIN2_4\[304] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[60]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_3\[305] = \ADC_SAR:MODIN2_3\[306]
Removing Lhs of wire \ADC_SAR:MODIN2_3\[306] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[62]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_2\[307] = \ADC_SAR:MODIN2_2\[308]
Removing Lhs of wire \ADC_SAR:MODIN2_2\[308] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[64]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_1\[309] = \ADC_SAR:MODIN2_1\[310]
Removing Lhs of wire \ADC_SAR:MODIN2_1\[310] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[66]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_0\[311] = \ADC_SAR:MODIN2_0\[312]
Removing Lhs of wire \ADC_SAR:MODIN2_0\[312] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[68]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_5\[313] = \ADC_SAR:ch_addr_5\[59]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_4\[314] = \ADC_SAR:ch_addr_4\[61]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_3\[315] = \ADC_SAR:ch_addr_3\[63]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_2\[316] = \ADC_SAR:ch_addr_2\[65]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_1\[317] = \ADC_SAR:ch_addr_1\[67]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_0\[318] = \ADC_SAR:ch_addr_0\[69]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_5\[319] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[58]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_4\[320] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[60]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_3\[321] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[62]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_2\[322] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[64]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_1\[323] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[66]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_0\[324] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[68]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_5\[325] = \ADC_SAR:ch_addr_5\[59]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_4\[326] = \ADC_SAR:ch_addr_4\[61]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_3\[327] = \ADC_SAR:ch_addr_3\[63]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_2\[328] = \ADC_SAR:ch_addr_2\[65]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_1\[329] = \ADC_SAR:ch_addr_1\[67]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_0\[330] = \ADC_SAR:ch_addr_0\[69]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_5\[331] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[58]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_4\[332] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[60]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_3\[333] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[62]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_2\[334] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[64]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_1\[335] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[66]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_0\[336] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[68]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_0\[343] = one[24]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_0\[344] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\[342]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:eqi_0\[350] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\[349]
Removing Rhs of wire \ADC_SAR:MODULE_1:g1:a0:xeq\[378] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_1\[351]
Removing Lhs of wire tmpOE__Steering_net_0[390] = one[24]
Removing Lhs of wire tmpOE__Button_net_0[396] = one[24]
Removing Rhs of wire Net_684[402] = \Timer:Net_55\[403]
Removing Lhs of wire \Timer:TimerUDB:ctrl_enable\[420] = \Timer:TimerUDB:control_7\[412]
Removing Lhs of wire \Timer:TimerUDB:ctrl_cmode_1\[422] = zero[8]
Removing Rhs of wire \Timer:TimerUDB:timer_enable\[431] = \Timer:TimerUDB:runmode_enable\[443]
Removing Rhs of wire \Timer:TimerUDB:run_mode\[432] = \Timer:TimerUDB:hwEnable\[433]
Removing Lhs of wire \Timer:TimerUDB:run_mode\[432] = \Timer:TimerUDB:control_7\[412]
Removing Lhs of wire \Timer:TimerUDB:trigger_enable\[435] = one[24]
Removing Lhs of wire \Timer:TimerUDB:tc_i\[437] = \Timer:TimerUDB:status_tc\[434]
Removing Lhs of wire \Timer:TimerUDB:capt_fifo_load_int\[442] = \Timer:TimerUDB:capt_fifo_load\[430]
Removing Lhs of wire \Timer:TimerUDB:status_6\[445] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:status_5\[446] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:status_4\[447] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:status_0\[448] = \Timer:TimerUDB:status_tc\[434]
Removing Lhs of wire \Timer:TimerUDB:status_1\[449] = \Timer:TimerUDB:capt_fifo_load\[430]
Removing Rhs of wire \Timer:TimerUDB:status_2\[450] = \Timer:TimerUDB:fifo_full\[451]
Removing Rhs of wire \Timer:TimerUDB:status_3\[452] = \Timer:TimerUDB:fifo_nempty\[453]
Removing Lhs of wire Net_12[455] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:cs_addr_2\[456] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:cs_addr_1\[457] = \Timer:TimerUDB:trig_reg\[444]
Removing Lhs of wire \Timer:TimerUDB:cs_addr_0\[458] = \Timer:TimerUDB:per_zero\[436]
Removing Lhs of wire tmpOE__LED_net_0[544] = one[24]
Removing Lhs of wire tmpOE__Rx_1_net_0[550] = one[24]
Removing Lhs of wire tmpOE__Tx_1_net_0[556] = one[24]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_5\\D\[570] = \ADC_SAR:ch_addr_5\[59]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_4\\D\[571] = \ADC_SAR:ch_addr_4\[61]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_3\\D\[572] = \ADC_SAR:ch_addr_3\[63]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_2\\D\[573] = \ADC_SAR:ch_addr_2\[65]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_1\\D\[574] = \ADC_SAR:ch_addr_1\[67]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_0\\D\[575] = \ADC_SAR:ch_addr_0\[69]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:comp_clk_reg\\D\[640] = \ADC_SAR:bSAR_SEQ:comb_logic\[267]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:bus_clk_reg\\D\[641] = \ADC_SAR:bSAR_SEQ:comb_logic\[267]
Removing Lhs of wire \Timer:TimerUDB:capture_last\\D\[642] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:tc_reg_i\\D\[643] = \Timer:TimerUDB:status_tc\[434]
Removing Lhs of wire \Timer:TimerUDB:hwEnable_reg\\D\[644] = \Timer:TimerUDB:control_7\[412]
Removing Lhs of wire \Timer:TimerUDB:capture_out_reg_i\\D\[645] = \Timer:TimerUDB:capt_fifo_load\[430]

------------------------------------------------------
Aliased 0 equations, 130 wires.
------------------------------------------------------

----------------------------------------------------------
Circuit simplification
----------------------------------------------------------

Substituting virtuals - pass 1:

Note:  Expanding virtual equation for 'one' (cost = 0):
one <=  ('1') ;

Note:  Expanding virtual equation for 'zero' (cost = 0):
zero <=  ('0') ;

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_5\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_5\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_2\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_2\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\' (cost = 4):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_1\' (cost = 8):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_2\' (cost = 16):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_2\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_3\' (cost = 32):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_4\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_3\ <= ((not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_4\ <= ((not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\)
	OR (not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\)
	OR (not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_0\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_0\ <= ((not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_0\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_0\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_1\ <= ((not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\)
	OR (not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\)
	OR (not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\));

Note:  Expanding virtual equation for '\Timer:TimerUDB:fifo_load_polarized\' (cost = 0):
\Timer:TimerUDB:fifo_load_polarized\ <=  ('0') ;

Note:  Expanding virtual equation for '\Timer:TimerUDB:timer_enable\' (cost = 0):
\Timer:TimerUDB:timer_enable\ <= (\Timer:TimerUDB:control_7\);


Substituting virtuals - pass 2:

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:xeq\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:xeq\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));


Substituting virtuals - pass 3:

Note:  Virtual signal \ADC_SAR:AMuxHw_2_Decoder_is_active\ with ( cost: 128 or cost_inv: -1)  > 90 or with size: 64 > 102 has been made a (soft) node.
\ADC_SAR:AMuxHw_2_Decoder_is_active\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));


Substituting virtuals - pass 4:


----------------------------------------------------------
Circuit simplification results:

	Expanded 24 signals.
	Turned 1 signals into soft nodes.
	Maximum default expansion cost was set at 3.
----------------------------------------------------------

------------------------------------------------------
Alias Detection
------------------------------------------------------
Aliasing \Timer:TimerUDB:capt_fifo_load\ to zero
Removing Lhs of wire \Timer:TimerUDB:capt_fifo_load\[430] = zero[8]
Removing Lhs of wire \Timer:TimerUDB:trig_reg\[444] = \Timer:TimerUDB:control_7\[412]

------------------------------------------------------
Aliased 0 equations, 2 wires.
------------------------------------------------------

----------------------------------------------------------
Circuit simplification
----------------------------------------------------------

Eliminating unused logic - pass 1:


Eliminating unused logic - pass 2:


Substituting virtuals - pass 1:


----------------------------------------------------------
Circuit simplification results:

	Expanded 0 signals.
	Turned 0 signals into soft nodes.
	Maximum default expansion cost was set at 3.
----------------------------------------------------------

topld:  No errors.

CYPRESS_DIR    : C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp
Warp Program   : C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\warp\bin/warp.exe
Warp Arguments : -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya "-.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj" -dcpsoc3 Node-Elephant.v -verilog
</CYPRESSTAG>
Warp synthesis phase: Elapsed time ==> 2s.002ms
<CYPRESSTAG name="Fitter results...">
<CYPRESSTAG name="Fitter startup details...">
cyp3fit: V3.0.0.3140, Family: PSoC3, Started at: Friday, 12 December 2014 20:34:23
Options: -yv2 -v3 -ygs -q10 -o2 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\GitHub\Node-Elephant\Node-Elephant\Node-Elephant.cydsn\Node-Elephant.cyprj -d CY8C5868AXI-LP035 Node-Elephant.v -verilog
</CYPRESSTAG>
<CYPRESSTAG name="Design parsing">
Design parsing phase: Elapsed time ==> 0s.024ms
</CYPRESSTAG>
<CYPRESSTAG name="Tech mapping">
<CYPRESSTAG name="Initial Mapping" icon="FILE_RPT_TECHM">
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:lti_0\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_2\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:gti_0\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_2\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:lti_1\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_5\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:gti_1\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_5\
    Converted constant MacroCell: \Timer:TimerUDB:capture_last\ from registered to combinatorial
    Converted constant MacroCell: \Timer:TimerUDB:capture_out_reg_i\ from registered to combinatorial
Assigning clock ADC_SAR_BusClock to clock BUS_CLK because it is a pass-through
Assigning clock CAN_Clock to clock BUS_CLK because it is a pass-through
<CYPRESSTAG name="Global Clock Selection" icon="FILE_RPT_TECHM">
    Digital Clock 0: Automatic-assigning  clock 'ADC_SAR_IntClock'. Fanout=72, Signal=\ADC_SAR:clock\
    Digital Clock 1: Automatic-assigning  clock 'clock'. Fanout=2, Signal=Net_10
</CYPRESSTAG>

Removing unused cells resulting from optimization
    Removed unused cell/equation '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_2\:macrocell'
    Removed unused cell/equation '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_5\:macrocell'
    Removed unused cell/equation '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_2\:macrocell'
    Removed unused cell/equation '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_5\:macrocell'
    Removed unused cell/equation '\Timer:TimerUDB:capture_last\:macrocell'
    Removed unused cell/equation '\Timer:TimerUDB:capture_out_reg_i\:macrocell'
    Removed unused cell/equation '\Timer:TimerUDB:hwEnable_reg\:macrocell'
    Removed unused cell/equation '\Timer:TimerUDB:tc_reg_i\:macrocell'
Done removing unused cells.
<CYPRESSTAG name="UDB Clock/Enable Remapping Results">
    UDB Clk/Enable \ADC_SAR:bSAR_SEQ:ClkEn\: with output requested to be synchronous
        ClockIn: ADC_SAR_IntClock was determined to be a global clock that is synchronous to BUS_CLK
        EnableIn: Constant 1 was determined to be synchronous to ClockIn
        ClockOut: ADC_SAR_IntClock, EnableOut: Constant 1
    UDB Clk/Enable \Timer:TimerUDB:clock_enable_block\: with output requested to be synchronous
        ClockIn: clock was determined to be a global clock that is synchronous to BUS_CLK
        EnableIn: Constant 1 was determined to be synchronous to ClockIn
        ClockOut: clock, EnableOut: Constant 1
    UDB Clk/Enable \Timer:TimerUDB:sCTRLReg:SyncCtl:cy_psoc3_udb_Ctl_Clk_Sync\: with output requested to be synchronous
        ClockIn: clock was determined to be a global clock that is synchronous to BUS_CLK
        EnableIn: Constant 1 was determined to be synchronous to ClockIn
        ClockOut: clock, EnableOut: Constant 1
</CYPRESSTAG>
ADD: pft.M0040: information: The following 2 pin(s) will be assigned a location by the fitter: Rx_1(0), Tx_1(0)


Removing unused cells resulting from optimization
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_10\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_11\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_12\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_13\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_14\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_15\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_16\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_17\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_18\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_19\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_20\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_21\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_22\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_23\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_24\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_25\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_26\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_27\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_28\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_29\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_30\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_31\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_32\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_33\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_34\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_35\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_36\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_37\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_38\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_39\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_40\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_41\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_42\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_43\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_44\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_45\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_46\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_47\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_48\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_49\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_50\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_51\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_52\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_53\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_54\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_55\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_56\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_57\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_58\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_59\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_5\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_60\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_61\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_62\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_63\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_6\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_7\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_8\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:AMuxHw_2_Decoder_one_hot_9\\D\:macrocell'
    Removed unused cell/equation '\ADC_SAR:bSAR_SEQ:comb_logic\:macrocell'
    Removed unused cell/equation '__ZERO__:macrocell'
Done removing unused cells.
<CYPRESSTAG name="Duplicate Macrocell detection">
</CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Duplicate Macrocell detection">
</CYPRESSTAG>
<CYPRESSTAG name="Design Equations" icon="FILE_RPT_EQUATION">

------------------------------------------------------------
Design Equations
------------------------------------------------------------
    <CYPRESSTAG name="Pin listing">

    ------------------------------------------------------------
    Pin listing
    ------------------------------------------------------------

    Pin : Name = Brake_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Brake_1(0)__PA ,
            analog_term => Net_493 ,
            pad => Brake_1(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ );
        Properties:
        {
        }

    Pin : Name = Brake_2(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Brake_2(0)__PA ,
            analog_term => Net_494 ,
            pad => Brake_2(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ );
        Properties:
        {
        }

    Pin : Name = Button(0)
        Attributes:
            In Group/Port: True
            In Sync Option: SYNC
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: RES_PULL_UP
            VTrip: CMOS
            Slew: FAST
            Input Sync needed: True
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL, ROUTABLE
            Initial Value: 1
            IO Voltage: 0
        PORT MAP (
            pa_out => Button(0)__PA ,
            pad => Button(0)_PAD );
        Properties:
        {
        }

    Pin : Name = LED(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => LED(0)__PA ,
            pad => LED(0)_PAD );
        Properties:
        {
        }

    Pin : Name = Rx_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: NOSYNC
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_DIGITAL
            VTrip: CMOS
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL, ROUTABLE
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Rx_1(0)__PA ,
            fb => Net_11 ,
            pad => Rx_1(0)_PAD );

    Pin : Name = Steering(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Steering(0)__PA ,
            analog_term => Net_496 ,
            pad => Steering(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ );
        Properties:
        {
        }

    Pin : Name = Throttle_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Throttle_1(0)__PA ,
            analog_term => Net_490 ,
            pad => Throttle_1(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ );
        Properties:
        {
        }

    Pin : Name = Throttle_2(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Throttle_2(0)__PA ,
            analog_term => Net_491 ,
            pad => Throttle_2(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ );
        Properties:
        {
        }

    Pin : Name = Tx_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL, ROUTABLE
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Tx_1(0)__PA ,
            input => Net_710 ,
            pad => Tx_1(0)_PAD );

    Pin : Name = \LCD:LCDPort(0)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(0)\__PA ,
            pad => \LCD:LCDPort(0)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(1)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(1)\__PA ,
            pad => \LCD:LCDPort(1)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(2)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(2)\__PA ,
            pad => \LCD:LCDPort(2)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(3)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(3)\__PA ,
            pad => \LCD:LCDPort(3)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(4)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(4)\__PA ,
            pad => \LCD:LCDPort(4)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(5)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(5)\__PA ,
            pad => \LCD:LCDPort(5)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(6)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(6)\__PA ,
            pad => \LCD:LCDPort(6)_PAD\ );
        Properties:
        {
        }
    </CYPRESSTAG>
    <CYPRESSTAG name="Macrocell listing" icon="FILE_RPT_EQUATION">

    ------------------------------------------------------------
    Macrocell listing
    ------------------------------------------------------------

    MacroCell: Name=Net_1094, Mode=(D-Register)
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_reg\ * !Net_1094
            + \ADC_SAR:nrq\
        );
        Output = Net_1094 (fanout=4)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active\, Mode=(Combinatorial)
        Total # of inputs        : 9
        Total # of product terms : 5
            Clock Enable: True
        Main Equation            : 5 pterms
        !(
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * \ADC_SAR:ch_addr_5\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * \ADC_SAR:ch_addr_4\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * \ADC_SAR:ch_addr_3\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * \ADC_SAR:ch_addr_2\
            + \ADC_SAR:AMuxHw_2_Decoder_is_active_split\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active\ (fanout=64)
        Properties               : 
        {
            soft = 1
        }

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active_split\, Mode=(Combinatorial)
        Total # of inputs        : 12
        Total # of product terms : 8
            Clock Enable: True
        Main Equation            : 8 pterms
        (
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * !\ADC_SAR:ch_addr_5\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * !\ADC_SAR:ch_addr_4\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * !\ADC_SAR:ch_addr_3\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * !\ADC_SAR:ch_addr_2\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * \ADC_SAR:ch_addr_1\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * !\ADC_SAR:ch_addr_1\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * \ADC_SAR:ch_addr_0\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * !\ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active_split\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_0\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ (fanout=65)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_1\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_1\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ (fanout=65)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_2\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_2\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_3\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_3\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_4\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_4\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_5\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_5\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_10\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_11\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_12\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_13\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_14\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_15\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_16\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_17\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_18\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_19\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_20\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_21\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_22\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_23\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_24\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_25\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_26\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_27\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_28\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_29\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_30\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_31\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_32\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_33\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_34\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_35\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_36\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_37\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_38\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_39\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_40\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_41\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_42\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_43\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_44\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_45\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_46\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_47\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_48\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_49\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_50\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_51\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_52\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_53\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_54\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_55\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_56\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_57\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_58\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_59\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_5\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_60\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_61\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_62\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_63\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_6\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_7\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_8\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_9\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ (fanout=1)

    MacroCell: Name=\ADC_SAR:bSAR_SEQ:bus_clk_reg\, Mode=(D-Register)
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (ClockBlock_BUS_CLK) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_reg\ * !Net_1094
            + \ADC_SAR:nrq\
        );
        Output = \ADC_SAR:bSAR_SEQ:bus_clk_reg\ (fanout=2)

    MacroCell: Name=\ADC_SAR:bSAR_SEQ:cnt_enable\, Mode=(Combinatorial)
        Total # of inputs        : 3
        Total # of product terms : 2
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              Net_924 * \ADC_SAR:bSAR_SEQ:enable\
            + \ADC_SAR:bSAR_SEQ:load_period\
        );
        Output = \ADC_SAR:bSAR_SEQ:cnt_enable\ (fanout=1)

    MacroCell: Name=\Timer:TimerUDB:status_tc\, Mode=(Combinatorial)
        Total # of inputs        : 2
        Total # of product terms : 1
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \Timer:TimerUDB:control_7\ * \Timer:TimerUDB:per_zero\
        );
        Output = \Timer:TimerUDB:status_tc\ (fanout=1)
    </CYPRESSTAG>
    <CYPRESSTAG name="Datapath listing">

    ------------------------------------------------------------
    Datapath listing
    ------------------------------------------------------------

    datapathcell: Name =\Timer:TimerUDB:sT16:timerdp:u0\
        PORT MAP (
            clock => Net_10 ,
            cs_addr_1 => \Timer:TimerUDB:control_7\ ,
            cs_addr_0 => \Timer:TimerUDB:per_zero\ ,
            chain_out => \Timer:TimerUDB:sT16:timerdp:carry\ );
        Properties:
        {
            a0_init = "00000000"
            a1_init = "00000000"
            ce0_sync = 1
            ce1_sync = 1
            cl0_sync = 1
            cl1_sync = 1
            cmsb_sync = 1
            co_msb_sync = 1
            cy_dpconfig = "0000000001000000000000000100000001000000010000000000000010000000000000001000000000000000100000000000000010000000000000001000000011111111000000001111111111111111000000000000000000000001000000000000000000011000"
            d0_init = "00000000"
            d1_init = "00000000"
            f0_blk_sync = 1
            f0_bus_sync = 1
            f1_blk_sync = 1
            f1_bus_sync = 1
            ff0_sync = 1
            ff1_sync = 1
            ov_msb_sync = 1
            so_sync = 1
            z0_sync = 1
            z1_sync = 1
        }
        Clock Polarity: Active High
        Clock Enable: True
        Next in chain : \Timer:TimerUDB:sT16:timerdp:u1\

    datapathcell: Name =\Timer:TimerUDB:sT16:timerdp:u1\
        PORT MAP (
            clock => Net_10 ,
            cs_addr_1 => \Timer:TimerUDB:control_7\ ,
            cs_addr_0 => \Timer:TimerUDB:per_zero\ ,
            z0_comb => \Timer:TimerUDB:per_zero\ ,
            f0_bus_stat_comb => \Timer:TimerUDB:status_3\ ,
            f0_blk_stat_comb => \Timer:TimerUDB:status_2\ ,
            chain_in => \Timer:TimerUDB:sT16:timerdp:carry\ );
        Properties:
        {
            a0_init = "00000000"
            a1_init = "00000000"
            ce0_sync = 1
            ce1_sync = 1
            cl0_sync = 1
            cl1_sync = 1
            cmsb_sync = 1
            co_msb_sync = 1
            cy_dpconfig = "0000000001000000000000000100000001000000010000000000000010000000000000001000000000000000100000000000000010000000000000001000000011111111000000001111111111111111100000110000000000000001000000110000000000011000"
            d0_init = "00000000"
            d1_init = "00000000"
            f0_blk_sync = 1
            f0_bus_sync = 1
            f1_blk_sync = 1
            f1_bus_sync = 1
            ff0_sync = 1
            ff1_sync = 1
            ov_msb_sync = 1
            so_sync = 1
            z0_sync = 1
            z1_sync = 1
        }
        Clock Polarity: Active High
        Clock Enable: True
        Previous in chain : \Timer:TimerUDB:sT16:timerdp:u0\
    </CYPRESSTAG>
    <CYPRESSTAG name="Status register listing">

    ------------------------------------------------------------
    Status register listing
    ------------------------------------------------------------

    statuscell: Name =\ADC_SAR:bSAR_SEQ:EOCSts\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            status_0 => Net_1094 );
        Properties:
        {
            cy_force_order = 1
            cy_md_select = "00000001"
        }
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="StatusI register listing">

    ------------------------------------------------------------
    StatusI register listing
    ------------------------------------------------------------

    statusicell: Name =\Timer:TimerUDB:rstSts:stsreg\
        PORT MAP (
            clock => Net_10 ,
            status_3 => \Timer:TimerUDB:status_3\ ,
            status_2 => \Timer:TimerUDB:status_2\ ,
            status_0 => \Timer:TimerUDB:status_tc\ ,
            interrupt => Net_684 );
        Properties:
        {
            cy_force_order = 1
            cy_int_mask = "1111111"
            cy_md_select = "0000011"
        }
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="Sync listing">
    </CYPRESSTAG>
    <CYPRESSTAG name="Control register listing">

    ------------------------------------------------------------
    Control register listing
    ------------------------------------------------------------

    controlcell: Name =\ADC_SAR:bSAR_SEQ:CtrlReg\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            control_7 => \ADC_SAR:bSAR_SEQ:control_7\ ,
            control_6 => \ADC_SAR:bSAR_SEQ:control_6\ ,
            control_5 => \ADC_SAR:bSAR_SEQ:control_5\ ,
            control_4 => \ADC_SAR:bSAR_SEQ:control_4\ ,
            control_3 => \ADC_SAR:bSAR_SEQ:control_3\ ,
            control_2 => \ADC_SAR:bSAR_SEQ:control_2\ ,
            control_1 => \ADC_SAR:bSAR_SEQ:load_period\ ,
            control_0 => \ADC_SAR:bSAR_SEQ:enable\ );
        Properties:
        {
            cy_ctrl_mode_0 = "00000111"
            cy_ctrl_mode_1 = "00000110"
            cy_ext_reset = 0
            cy_force_order = 1
            cy_init_value = "00000000"
        }
        Clock Polarity: Active High
        Clock Enable: True

    controlcell: Name =\Timer:TimerUDB:sCTRLReg:SyncCtl:ctrlreg\
        PORT MAP (
            clock => Net_10 ,
            control_7 => \Timer:TimerUDB:control_7\ ,
            control_6 => \Timer:TimerUDB:control_6\ ,
            control_5 => \Timer:TimerUDB:control_5\ ,
            control_4 => \Timer:TimerUDB:control_4\ ,
            control_3 => \Timer:TimerUDB:control_3\ ,
            control_2 => \Timer:TimerUDB:control_2\ ,
            control_1 => \Timer:TimerUDB:control_1\ ,
            control_0 => \Timer:TimerUDB:control_0\ );
        Properties:
        {
            cy_ctrl_mode_0 = "11111111"
            cy_ctrl_mode_1 = "00000000"
            cy_ext_reset = 0
            cy_force_order = 1
            cy_init_value = "00000000"
        }
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="Count7 listing">

    ------------------------------------------------------------
    Count7 listing
    ------------------------------------------------------------

    count7cell: Name =\ADC_SAR:bSAR_SEQ:ChannelCounter\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            enable => \ADC_SAR:bSAR_SEQ:cnt_enable\ ,
            count_6 => \ADC_SAR:bSAR_SEQ:count_6\ ,
            count_5 => \ADC_SAR:ch_addr_5\ ,
            count_4 => \ADC_SAR:ch_addr_4\ ,
            count_3 => \ADC_SAR:ch_addr_3\ ,
            count_2 => \ADC_SAR:ch_addr_2\ ,
            count_1 => \ADC_SAR:ch_addr_1\ ,
            count_0 => \ADC_SAR:ch_addr_0\ );
        Properties:
        {
            cy_alt_mode = 0
            cy_init_value = "0000000"
            cy_period = "0000100"
            cy_route_en = 1
            cy_route_ld = 0
        }
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="DRQ listing">

    ------------------------------------------------------------
    DRQ listing
    ------------------------------------------------------------

    drqcell: Name =\ADC_SAR:FinalBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3698\ ,
            termin => zero ,
            termout => \ADC_SAR:nrq\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }

    drqcell: Name =\ADC_SAR:TempBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3830\ ,
            termin => zero ,
            termout => \ADC_SAR:Net_3698\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
    </CYPRESSTAG>
    <CYPRESSTAG name="Interrupt listing">

    ------------------------------------------------------------
    Interrupt listing
    ------------------------------------------------------------

    interrupt: Name =\ADC_SAR:IRQ\
        PORT MAP (
            interrupt => Net_1094 );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\CAN:isr\
        PORT MAP (
            interrupt => Net_715 );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =isr
        PORT MAP (
            interrupt => Net_684 );
        Properties:
        {
            int_type = "10"
        }
    </CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Technology mapping summary" expanded>

------------------------------------------------------------
Technology mapping summary
------------------------------------------------------------

Resource Type                 : Used : Free :  Max :  % Used
============================================================
Digital clock dividers        :    2 :    6 :    8 :  25.00%
Analog clock dividers         :    0 :    4 :    4 :   0.00%
Pins                          :   19 :   53 :   72 :  26.39%
UDB Macrocells                :   76 :  116 :  192 :  39.58%
UDB Unique Pterms             :   88 :  296 :  384 :  22.92%
UDB Total Pterms              :   90 :      :      : 
UDB Datapath Cells            :    2 :   22 :   24 :   8.33%
UDB Status Cells              :    2 :   22 :   24 :   8.33%
             Status Registers :    1 
            StatusI Registers :    1 
UDB Control Cells             :    3 :   21 :   24 :  12.50%
            Control Registers :    2 
                 Count7 Cells :    1 
DMA Channels                  :    2 :   22 :   24 :   8.33%
Interrupts                    :    3 :   29 :   32 :   9.38%
DSM Fixed Blocks              :    0 :    1 :    1 :   0.00%
VIDAC Fixed Blocks            :    0 :    4 :    4 :   0.00%
SC Fixed Blocks               :    0 :    4 :    4 :   0.00%
Comparator Fixed Blocks       :    0 :    4 :    4 :   0.00%
Opamp Fixed Blocks            :    0 :    4 :    4 :   0.00%
CapSense Buffers              :    0 :    2 :    2 :   0.00%
CAN Fixed Blocks              :    1 :    0 :    1 : 100.00%
Decimator Fixed Blocks        :    0 :    1 :    1 :   0.00%
I2C Fixed Blocks              :    0 :    1 :    1 :   0.00%
Timer Fixed Blocks            :    0 :    4 :    4 :   0.00%
DFB Fixed Blocks              :    0 :    1 :    1 :   0.00%
USB Fixed Blocks              :    0 :    1 :    1 :   0.00%
LCD Fixed Blocks              :    0 :    1 :    1 :   0.00%
EMIF Fixed Blocks             :    0 :    1 :    1 :   0.00%
LPF Fixed Blocks              :    0 :    2 :    2 :   0.00%
SAR Fixed Blocks              :    1 :    1 :    2 :  50.00%
</CYPRESSTAG>
Technology Mapping: Elapsed time ==> 0s.382ms
Info: mpr.M0037: Unused pieces of the design have been optimized out. See the Tech mapping section of the report file for details. (App=cydsfit)
Tech mapping phase: Elapsed time ==> 0s.474ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Placement">
Info: apr.M0002: Analog signal "Net_929" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_930" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_932" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_934" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_935" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_937" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_939" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_940" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_942" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_944" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_945" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_947" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_949" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_950" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_952" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_954" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_955" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_957" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_959" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_960" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_962" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_964" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_965" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_967" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_969" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_970" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_972" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_974" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_975" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_977" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_979" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_980" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_982" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_984" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_985" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_987" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_989" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_990" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_992" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_994" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_995" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_997" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_999" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1000" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1001" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1002" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1003" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1004" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1005" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1006" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1007" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1008" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1009" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1010" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1011" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1012" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1013" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1014" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_1015" is connected to one terminal only. (App=cydsfit)
Initial Analog Placement Results:
IO_4@[IOP=(3)][IoId=(4)] : Brake_1(0) (fixed)
IO_5@[IOP=(3)][IoId=(5)] : Brake_2(0) (fixed)
IO_1@[IOP=(6)][IoId=(1)] : Button(0) (fixed)
IO_3@[IOP=(6)][IoId=(3)] : LED(0) (fixed)
IO_6@[IOP=(3)][IoId=(6)] : Steering(0) (fixed)
IO_2@[IOP=(3)][IoId=(2)] : Throttle_1(0) (fixed)
IO_3@[IOP=(3)][IoId=(3)] : Throttle_2(0) (fixed)
IO_0@[IOP=(2)][IoId=(0)] : \LCD:LCDPort(0)\ (fixed)
IO_1@[IOP=(2)][IoId=(1)] : \LCD:LCDPort(1)\ (fixed)
IO_2@[IOP=(2)][IoId=(2)] : \LCD:LCDPort(2)\ (fixed)
IO_3@[IOP=(2)][IoId=(3)] : \LCD:LCDPort(3)\ (fixed)
IO_4@[IOP=(2)][IoId=(4)] : \LCD:LCDPort(4)\ (fixed)
IO_5@[IOP=(2)][IoId=(5)] : \LCD:LCDPort(5)\ (fixed)
IO_6@[IOP=(2)][IoId=(6)] : \LCD:LCDPort(6)\ (fixed)
SAR[1]@[FFB(SAR,1)] : \ADC_SAR:SAR:ADC_SAR\
Vref[13]@[FFB(Vref,13)] : \ADC_SAR:SAR:vRef_Vdda_1\
Info: apr.M0064: The signal 'Net_490' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_491' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_493' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_494' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_496' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_929' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_930' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_932' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_934' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_935' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_937' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_939' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_940' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_942' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_944' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_945' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_947' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_949' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_950' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_952' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_954' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_955' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_957' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_959' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_960' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_962' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_964' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_965' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_967' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_969' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_970' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_972' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_974' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_975' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_977' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_979' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_980' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_982' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_984' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_985' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_987' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_989' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_990' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_992' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_994' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_995' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_997' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_999' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1000' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1001' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1002' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1003' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1004' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1005' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1006' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1007' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1008' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1009' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1010' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1011' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1012' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1013' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1014' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Info: apr.M0064: The signal 'Net_1015' is one of the input signals of an 'AmuxHw component'. It is a constraint for analog routing. (App=cydsfit)
Log: apr.M0058: The analog placement iterative improvement is 46% done. (App=cydsfit)
Analog Placement Results:
IO_4@[IOP=(3)][IoId=(4)] : Brake_1(0) (fixed)
IO_5@[IOP=(3)][IoId=(5)] : Brake_2(0) (fixed)
IO_1@[IOP=(6)][IoId=(1)] : Button(0) (fixed)
IO_3@[IOP=(6)][IoId=(3)] : LED(0) (fixed)
IO_6@[IOP=(3)][IoId=(6)] : Steering(0) (fixed)
IO_2@[IOP=(3)][IoId=(2)] : Throttle_1(0) (fixed)
IO_3@[IOP=(3)][IoId=(3)] : Throttle_2(0) (fixed)
IO_0@[IOP=(2)][IoId=(0)] : \LCD:LCDPort(0)\ (fixed)
IO_1@[IOP=(2)][IoId=(1)] : \LCD:LCDPort(1)\ (fixed)
IO_2@[IOP=(2)][IoId=(2)] : \LCD:LCDPort(2)\ (fixed)
IO_3@[IOP=(2)][IoId=(3)] : \LCD:LCDPort(3)\ (fixed)
IO_4@[IOP=(2)][IoId=(4)] : \LCD:LCDPort(4)\ (fixed)
IO_5@[IOP=(2)][IoId=(5)] : \LCD:LCDPort(5)\ (fixed)
IO_6@[IOP=(2)][IoId=(6)] : \LCD:LCDPort(6)\ (fixed)
SAR[1]@[FFB(SAR,1)] : \ADC_SAR:SAR:ADC_SAR\
Vref[13]@[FFB(Vref,13)] : \ADC_SAR:SAR:vRef_Vdda_1\

Analog Placement phase: Elapsed time ==> 6s.229ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Routing">
Analog Routing phase: Elapsed time ==> 0s.008ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Code Generation">
============ Analog Final Answer Routes ============
Dump of CyAnalogRoutingResultsDB
Map of net to items {
  Net: \ADC_SAR:Net_2803\ {
    sar_1_vplus
  }
  Net: Net_490 {
    p3_2
  }
  Net: Net_491 {
    p3_3
  }
  Net: Net_493 {
    p3_4
  }
  Net: Net_494 {
    p3_5
  }
  Net: Net_496 {
    p3_6
  }
  Net: Net_929 {
  }
  Net: Net_930 {
  }
  Net: Net_932 {
  }
  Net: Net_934 {
  }
  Net: Net_935 {
  }
  Net: Net_937 {
  }
  Net: Net_939 {
  }
  Net: Net_940 {
  }
  Net: Net_942 {
  }
  Net: Net_944 {
  }
  Net: Net_945 {
  }
  Net: Net_947 {
  }
  Net: Net_949 {
  }
  Net: Net_950 {
  }
  Net: Net_952 {
  }
  Net: Net_954 {
  }
  Net: Net_955 {
  }
  Net: Net_957 {
  }
  Net: Net_959 {
  }
  Net: Net_960 {
  }
  Net: Net_962 {
  }
  Net: Net_964 {
  }
  Net: Net_965 {
  }
  Net: Net_967 {
  }
  Net: Net_969 {
  }
  Net: Net_970 {
  }
  Net: Net_972 {
  }
  Net: Net_974 {
  }
  Net: Net_975 {
  }
  Net: Net_977 {
  }
  Net: Net_979 {
  }
  Net: Net_980 {
  }
  Net: Net_982 {
  }
  Net: Net_984 {
  }
  Net: Net_985 {
  }
  Net: Net_987 {
  }
  Net: Net_989 {
  }
  Net: Net_990 {
  }
  Net: Net_992 {
  }
  Net: Net_994 {
  }
  Net: Net_995 {
  }
  Net: Net_997 {
  }
  Net: Net_999 {
  }
  Net: Net_1000 {
  }
  Net: Net_1001 {
  }
  Net: Net_1002 {
  }
  Net: Net_1003 {
  }
  Net: Net_1004 {
  }
  Net: Net_1005 {
  }
  Net: Net_1006 {
  }
  Net: Net_1007 {
  }
  Net: Net_1008 {
  }
  Net: Net_1009 {
  }
  Net: Net_1010 {
  }
  Net: Net_1011 {
  }
  Net: Net_1012 {
  }
  Net: Net_1013 {
  }
  Net: Net_1014 {
  }
  Net: Net_1015 {
  }
  Net: \ADC_SAR:SAR:Net_126\ {
    sar_1_vrefhi
    sar_1_vminus_x_sar_1_vrefhi
    sar_1_vminus
  }
  Net: \ADC_SAR:SAR:Net_215\ {
  }
  Net: \ADC_SAR:SAR:Net_248\ {
    common_sar_vref_vdda/2
    common_sar_vref_vdda/2_x_sar_1_vref_vdda_vdda_2
    sar_1_vref_vdda_vdda_2
    sar_1_vref_x_sar_1_vref_vdda_vdda_2
    sar_1_vref
  }
  Net: AmuxNet::\ADC_SAR:AMuxHw_2\ {
    sar_1_vplus
    agr4_x_sar_1_vplus
    agr4
    agr4_x_p3_4
    agr5_x_sar_1_vplus
    agr5
    agr5_x_p3_5
    agr6_x_sar_1_vplus
    agr6
    agr6_x_p3_2
    agr7_x_sar_1_vplus
    agr7
    agr7_x_p3_3
    agr6_x_p3_6
    p3_4
    p3_5
    p3_2
    p3_3
    p3_6
  }
}
Map of item to net {
  sar_1_vrefhi                                     -> \ADC_SAR:SAR:Net_126\
  sar_1_vminus_x_sar_1_vrefhi                      -> \ADC_SAR:SAR:Net_126\
  sar_1_vminus                                     -> \ADC_SAR:SAR:Net_126\
  common_sar_vref_vdda/2                           -> \ADC_SAR:SAR:Net_248\
  common_sar_vref_vdda/2_x_sar_1_vref_vdda_vdda_2  -> \ADC_SAR:SAR:Net_248\
  sar_1_vref_vdda_vdda_2                           -> \ADC_SAR:SAR:Net_248\
  sar_1_vref_x_sar_1_vref_vdda_vdda_2              -> \ADC_SAR:SAR:Net_248\
  sar_1_vref                                       -> \ADC_SAR:SAR:Net_248\
  sar_1_vplus                                      -> \ADC_SAR:Net_2803\
  p3_2                                             -> Net_490
  p3_3                                             -> Net_491
  p3_4                                             -> Net_493
  p3_5                                             -> Net_494
  p3_6                                             -> Net_496
  agr4_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr4                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr4_x_p3_4                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5_x_p3_5                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_p3_2                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7_x_p3_3                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_p3_6                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
}
Mux Info {
  Mux: \ADC_SAR:AMuxHw_2\ {
     Mouth: \ADC_SAR:Net_2803\
     Guts:  AmuxNet::\ADC_SAR:AMuxHw_2\
     IsSingleSwitching: False
     IsStaticSwitching: True
     IsAtMostOneSwitch: True
    Arm: 0 {
      Net:   Net_490
      Outer: agr6_x_p3_2
      Inner: __open__
      Path {
        p3_2
        agr6_x_p3_2
        agr6
        agr6_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 1 {
      Net:   Net_491
      Outer: agr7_x_p3_3
      Inner: agr7_x_sar_1_vplus
      Path {
        p3_3
        agr7_x_p3_3
        agr7
        agr7_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 2 {
      Net:   Net_493
      Outer: agr4_x_p3_4
      Inner: agr4_x_sar_1_vplus
      Path {
        p3_4
        agr4_x_p3_4
        agr4
        agr4_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 3 {
      Net:   Net_494
      Outer: agr5_x_p3_5
      Inner: agr5_x_sar_1_vplus
      Path {
        p3_5
        agr5_x_p3_5
        agr5
        agr5_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 4 {
      Net:   Net_496
      Outer: agr6_x_p3_6
      Inner: __open__
      Path {
        p3_6
        agr6_x_p3_6
        agr6
        agr6_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 5 {
      Net:   Net_929
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 6 {
      Net:   Net_930
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 7 {
      Net:   Net_932
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 8 {
      Net:   Net_934
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 9 {
      Net:   Net_935
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 10 {
      Net:   Net_937
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 11 {
      Net:   Net_939
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 12 {
      Net:   Net_940
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 13 {
      Net:   Net_942
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 14 {
      Net:   Net_944
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 15 {
      Net:   Net_945
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 16 {
      Net:   Net_947
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 17 {
      Net:   Net_949
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 18 {
      Net:   Net_950
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 19 {
      Net:   Net_952
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 20 {
      Net:   Net_954
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 21 {
      Net:   Net_955
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 22 {
      Net:   Net_957
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 23 {
      Net:   Net_959
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 24 {
      Net:   Net_960
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 25 {
      Net:   Net_962
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 26 {
      Net:   Net_964
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 27 {
      Net:   Net_965
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 28 {
      Net:   Net_967
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 29 {
      Net:   Net_969
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 30 {
      Net:   Net_970
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 31 {
      Net:   Net_972
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 32 {
      Net:   Net_974
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 33 {
      Net:   Net_975
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 34 {
      Net:   Net_977
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 35 {
      Net:   Net_979
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 36 {
      Net:   Net_980
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 37 {
      Net:   Net_982
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 38 {
      Net:   Net_984
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 39 {
      Net:   Net_985
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 40 {
      Net:   Net_987
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 41 {
      Net:   Net_989
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 42 {
      Net:   Net_990
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 43 {
      Net:   Net_992
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 44 {
      Net:   Net_994
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 45 {
      Net:   Net_995
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 46 {
      Net:   Net_997
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 47 {
      Net:   Net_999
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 48 {
      Net:   Net_1000
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 49 {
      Net:   Net_1001
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 50 {
      Net:   Net_1002
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 51 {
      Net:   Net_1003
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 52 {
      Net:   Net_1004
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 53 {
      Net:   Net_1005
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 54 {
      Net:   Net_1006
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 55 {
      Net:   Net_1007
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 56 {
      Net:   Net_1008
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 57 {
      Net:   Net_1009
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 58 {
      Net:   Net_1010
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 59 {
      Net:   Net_1011
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 60 {
      Net:   Net_1012
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 61 {
      Net:   Net_1013
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 62 {
      Net:   Net_1014
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 63 {
      Net:   Net_1015
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
  }
}
Dump of CyP35AnalogRoutingResultsDB
IsVddaHalfUsedForComp = False
IsVddaHalfUsedForSar0 = False
IsVddaHalfUsedForSar1 = True
Analog Code Generation phase: Elapsed time ==> 0s.348ms
</CYPRESSTAG>
<CYPRESSTAG name="Digital Placement">
<CYPRESSTAG name="Detailed placement messages">
I2076: Total run-time: 3.5 sec.

</CYPRESSTAG>
<CYPRESSTAG name="PLD Packing">
<CYPRESSTAG name="PLD Packing Summary" expanded>

------------------------------------------------------------
PLD Packing Summary
------------------------------------------------------------
            Resource Type : Used : Free :  Max :  % Used
    ====================================================
                     PLDs :   28 :   20 :   48 :  58.33%

<CYPRESSTAG name="PLD Statistics">

        PLD Resource Type :     Average/LAB
    =======================================
                   Inputs :            7.71
                   Pterms :            3.21
               Macrocells :            2.71
</CYPRESSTAG>
<CYPRESSTAG name="Packed PLD Contents">
Packed PLD Contents not displayed at this verbose level.</CYPRESSTAG>
</CYPRESSTAG>
PLD Packing: Elapsed time ==> 0s.002ms
</CYPRESSTAG>
<CYPRESSTAG name="Partitioning">
<CYPRESSTAG name="Initial Partitioning Summary">
Initial Partitioning Summary not displayed at this verbose level.</CYPRESSTAG>
<CYPRESSTAG name="Final Partitioning Summary">
Final Partitioning Summary not displayed at this verbose level.</CYPRESSTAG>
Partitioning: Elapsed time ==> 0s.082ms
</CYPRESSTAG>
<CYPRESSTAG name="Simulated Annealing">
Annealing: Elapsed time ==> 0s.002ms
<CYPRESSTAG name="Simulated Annealing Results">
The seed used for moves was 114161200.
Inital cost was 429, final cost is 429 (0.00% improvement).</CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Final Placement Summary">

------------------------------------------------------------
Final Placement Summary
------------------------------------------------------------

       Resource Type :      Count : Avg Inputs : Avg Outputs
    ========================================================
                 UDB :         14 :       8.50 :       5.43
<CYPRESSTAG name="Final Placement Details">
<CYPRESSTAG name="Component Details">

------------------------------------------------------------
Component Placement Details
------------------------------------------------------------
UDB [UDB=(0,0)] is empty.
UDB [UDB=(0,1)] is empty.
UDB [UDB=(0,2)] contents:
LAB@[UDB=(0,2)][LB=0] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_22\, Mode=(D-Register) @ [UDB=(0,2)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(0,2)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]: (empty)
    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_10\, Mode=(D-Register) @ [UDB=(0,2)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_34\, Mode=(D-Register) @ [UDB=(0,2)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(0,3)] is empty.
UDB [UDB=(0,4)] is empty.
UDB [UDB=(0,5)] is empty.
UDB [UDB=(1,0)] is empty.
UDB [UDB=(1,1)] is empty.
UDB [UDB=(1,2)] contents:
LAB@[UDB=(1,2)][LB=0] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_6\, Mode=(D-Register) @ [UDB=(1,2)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_40\, Mode=(D-Register) @ [UDB=(1,2)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_12\, Mode=(D-Register) @ [UDB=(1,2)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(1,2)][LB=1] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]: (empty)
    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_63\, Mode=(D-Register) @ [UDB=(1,2)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]: (empty)
}

UDB [UDB=(1,3)] is empty.
UDB [UDB=(1,4)] is empty.
UDB [UDB=(1,5)] is empty.
UDB [UDB=(2,0)] contents:
LAB@[UDB=(2,0)][LB=0] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_27\, Mode=(D-Register) @ [UDB=(2,0)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(2,0)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_42\, Mode=(D-Register) @ [UDB=(2,0)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_46\, Mode=(D-Register) @ [UDB=(2,0)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(2,1)] contents:
LAB@[UDB=(2,1)][LB=0] #macrocells=4, #inputs=9, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\Timer:TimerUDB:status_tc\, Mode=(Combinatorial) @ [UDB=(2,1)][LB=0][MC=0]
        Total # of inputs        : 2
        Total # of product terms : 1
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \Timer:TimerUDB:control_7\ * \Timer:TimerUDB:per_zero\
        );
        Output = \Timer:TimerUDB:status_tc\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_59\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_18\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_15\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,1)][LB=1] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_11\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_56\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_37\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ (fanout=1)
        Properties               : 
        {
        }
}

datapathcell: Name =\Timer:TimerUDB:sT16:timerdp:u1\
    PORT MAP (
        clock => Net_10 ,
        cs_addr_1 => \Timer:TimerUDB:control_7\ ,
        cs_addr_0 => \Timer:TimerUDB:per_zero\ ,
        z0_comb => \Timer:TimerUDB:per_zero\ ,
        f0_bus_stat_comb => \Timer:TimerUDB:status_3\ ,
        f0_blk_stat_comb => \Timer:TimerUDB:status_2\ ,
        chain_in => \Timer:TimerUDB:sT16:timerdp:carry\ );
    Properties:
    {
        a0_init = "00000000"
        a1_init = "00000000"
        ce0_sync = 1
        ce1_sync = 1
        cl0_sync = 1
        cl1_sync = 1
        cmsb_sync = 1
        co_msb_sync = 1
        cy_dpconfig = "0000000001000000000000000100000001000000010000000000000010000000000000001000000000000000100000000000000010000000000000001000000011111111000000001111111111111111100000110000000000000001000000110000000000011000"
        d0_init = "00000000"
        d1_init = "00000000"
        f0_blk_sync = 1
        f0_bus_sync = 1
        f1_blk_sync = 1
        f1_bus_sync = 1
        ff0_sync = 1
        ff1_sync = 1
        ov_msb_sync = 1
        so_sync = 1
        z0_sync = 1
        z1_sync = 1
    }
    Clock Polarity: Active High
    Clock Enable: True
    Previous in chain : \Timer:TimerUDB:sT16:timerdp:u0\

statusicell: Name =\Timer:TimerUDB:rstSts:stsreg\
    PORT MAP (
        clock => Net_10 ,
        status_3 => \Timer:TimerUDB:status_3\ ,
        status_2 => \Timer:TimerUDB:status_2\ ,
        status_0 => \Timer:TimerUDB:status_tc\ ,
        interrupt => Net_684 );
    Properties:
    {
        cy_force_order = 1
        cy_int_mask = "1111111"
        cy_md_select = "0000011"
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(2,2)] contents:
LAB@[UDB=(2,2)][LB=0] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_44\, Mode=(D-Register) @ [UDB=(2,2)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_52\, Mode=(D-Register) @ [UDB=(2,2)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_33\, Mode=(D-Register) @ [UDB=(2,2)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,2)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_60\, Mode=(D-Register) @ [UDB=(2,2)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_45\, Mode=(D-Register) @ [UDB=(2,2)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_19\, Mode=(D-Register) @ [UDB=(2,2)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_29\, Mode=(D-Register) @ [UDB=(2,2)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(2,3)] contents:
LAB@[UDB=(2,3)][LB=0] #macrocells=4, #inputs=8, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_1\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=0]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_1\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ (fanout=65)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_55\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_23\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_24\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,3)][LB=1] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_51\, Mode=(D-Register) @ [UDB=(2,3)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_57\, Mode=(D-Register) @ [UDB=(2,3)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_48\, Mode=(D-Register) @ [UDB=(2,3)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(2,4)] contents:
LAB@[UDB=(2,4)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_7\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_9\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_61\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_32\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,4)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_5\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_50\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_36\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_20\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(2,5)] contents:
LAB@[UDB=(2,5)][LB=0] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_30\, Mode=(D-Register) @ [UDB=(2,5)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_53\, Mode=(D-Register) @ [UDB=(2,5)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,5)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_54\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_62\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,0)] contents:
LAB@[UDB=(3,0)][LB=0] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_26\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,0)][LB=1] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,1)] contents:
LAB@[UDB=(3,1)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_38\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_17\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_25\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_58\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,1)][LB=1] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_13\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_28\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_47\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ (fanout=1)
        Properties               : 
        {
        }
}

datapathcell: Name =\Timer:TimerUDB:sT16:timerdp:u0\
    PORT MAP (
        clock => Net_10 ,
        cs_addr_1 => \Timer:TimerUDB:control_7\ ,
        cs_addr_0 => \Timer:TimerUDB:per_zero\ ,
        chain_out => \Timer:TimerUDB:sT16:timerdp:carry\ );
    Properties:
    {
        a0_init = "00000000"
        a1_init = "00000000"
        ce0_sync = 1
        ce1_sync = 1
        cl0_sync = 1
        cl1_sync = 1
        cmsb_sync = 1
        co_msb_sync = 1
        cy_dpconfig = "0000000001000000000000000100000001000000010000000000000010000000000000001000000000000000100000000000000010000000000000001000000011111111000000001111111111111111000000000000000000000001000000000000000000011000"
        d0_init = "00000000"
        d1_init = "00000000"
        f0_blk_sync = 1
        f0_bus_sync = 1
        f1_blk_sync = 1
        f1_bus_sync = 1
        ff0_sync = 1
        ff1_sync = 1
        ov_msb_sync = 1
        so_sync = 1
        z0_sync = 1
        z1_sync = 1
    }
    Clock Polarity: Active High
    Clock Enable: True
    Next in chain : \Timer:TimerUDB:sT16:timerdp:u1\

controlcell: Name =\Timer:TimerUDB:sCTRLReg:SyncCtl:ctrlreg\
    PORT MAP (
        clock => Net_10 ,
        control_7 => \Timer:TimerUDB:control_7\ ,
        control_6 => \Timer:TimerUDB:control_6\ ,
        control_5 => \Timer:TimerUDB:control_5\ ,
        control_4 => \Timer:TimerUDB:control_4\ ,
        control_3 => \Timer:TimerUDB:control_3\ ,
        control_2 => \Timer:TimerUDB:control_2\ ,
        control_1 => \Timer:TimerUDB:control_1\ ,
        control_0 => \Timer:TimerUDB:control_0\ );
    Properties:
    {
        cy_ctrl_mode_0 = "11111111"
        cy_ctrl_mode_1 = "00000000"
        cy_ext_reset = 0
        cy_force_order = 1
        cy_init_value = "00000000"
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(3,2)] contents:
LAB@[UDB=(3,2)][LB=0] #macrocells=3, #inputs=8, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_2\, Mode=(D-Register) @ [UDB=(3,2)][LB=0][MC=0]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_2\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_41\, Mode=(D-Register) @ [UDB=(3,2)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_43\, Mode=(D-Register) @ [UDB=(3,2)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]: (empty)
}

LAB@[UDB=(3,2)][LB=1] #macrocells=4, #inputs=9, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_3\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=0]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_3\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_4\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=1]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_4\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_8\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_35\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,3)] contents:
LAB@[UDB=(3,3)][LB=0] #macrocells=1, #inputs=12, #pterms=8
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active_split\, Mode=(Combinatorial) @ [UDB=(3,3)][LB=0][MC=0]
        Total # of inputs        : 12
        Total # of product terms : 8
            Clock Enable: True
        Main Equation            : 8 pterms
        (
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * !\ADC_SAR:ch_addr_5\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * !\ADC_SAR:ch_addr_4\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * !\ADC_SAR:ch_addr_3\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * !\ADC_SAR:ch_addr_2\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * \ADC_SAR:ch_addr_1\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * !\ADC_SAR:ch_addr_1\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * \ADC_SAR:ch_addr_0\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * !\ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active_split\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(3,3)][LB=1] #macrocells=4, #inputs=12, #pterms=8
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active\, Mode=(Combinatorial) @ [UDB=(3,3)][LB=1][MC=0]
        Total # of inputs        : 9
        Total # of product terms : 5
            Clock Enable: True
        Main Equation            : 5 pterms
        !(
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * \ADC_SAR:ch_addr_5\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * \ADC_SAR:ch_addr_4\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * \ADC_SAR:ch_addr_3\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * \ADC_SAR:ch_addr_2\
            + \ADC_SAR:AMuxHw_2_Decoder_is_active_split\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active\ (fanout=64)
        Properties               : 
        {
            soft = 1
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_14\, Mode=(D-Register) @ [UDB=(3,3)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_39\, Mode=(D-Register) @ [UDB=(3,3)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_21\, Mode=(D-Register) @ [UDB=(3,3)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ (fanout=1)
        Properties               : 
        {
        }
}

count7cell: Name =\ADC_SAR:bSAR_SEQ:ChannelCounter\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        enable => \ADC_SAR:bSAR_SEQ:cnt_enable\ ,
        count_6 => \ADC_SAR:bSAR_SEQ:count_6\ ,
        count_5 => \ADC_SAR:ch_addr_5\ ,
        count_4 => \ADC_SAR:ch_addr_4\ ,
        count_3 => \ADC_SAR:ch_addr_3\ ,
        count_2 => \ADC_SAR:ch_addr_2\ ,
        count_1 => \ADC_SAR:ch_addr_1\ ,
        count_0 => \ADC_SAR:ch_addr_0\ );
    Properties:
    {
        cy_alt_mode = 0
        cy_init_value = "0000000"
        cy_period = "0000100"
        cy_route_en = 1
        cy_route_ld = 0
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(3,4)] contents:
LAB@[UDB=(3,4)][LB=0] #macrocells=2, #inputs=6, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:bSAR_SEQ:bus_clk_reg\, Mode=(D-Register) @ [UDB=(3,4)][LB=0][MC=0]
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (ClockBlock_BUS_CLK) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_reg\ * !Net_1094
            + \ADC_SAR:nrq\
        );
        Output = \ADC_SAR:bSAR_SEQ:bus_clk_reg\ (fanout=2)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:bSAR_SEQ:cnt_enable\, Mode=(Combinatorial) @ [UDB=(3,4)][LB=0][MC=1]
        Total # of inputs        : 3
        Total # of product terms : 2
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              Net_924 * \ADC_SAR:bSAR_SEQ:enable\
            + \ADC_SAR:bSAR_SEQ:load_period\
        );
        Output = \ADC_SAR:bSAR_SEQ:cnt_enable\ (fanout=2)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(3,4)][LB=1] #macrocells=4, #inputs=12, #pterms=5
{
    [McSlotId=0]:     MacroCell: Name=Net_1094, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=0]
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_reg\ * !Net_1094
            + \ADC_SAR:nrq\
        );
        Output = Net_1094 (fanout=4)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_5\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=1]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_5\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_0\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=2]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ (fanout=65)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_16\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ (fanout=1)
        Properties               : 
        {
        }
}

statuscell: Name =\ADC_SAR:bSAR_SEQ:EOCSts\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        status_0 => Net_1094 );
    Properties:
    {
        cy_force_order = 1
        cy_md_select = "00000001"
    }
    Clock Polarity: Active High
    Clock Enable: True

controlcell: Name =\ADC_SAR:bSAR_SEQ:CtrlReg\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        control_7 => \ADC_SAR:bSAR_SEQ:control_7\ ,
        control_6 => \ADC_SAR:bSAR_SEQ:control_6\ ,
        control_5 => \ADC_SAR:bSAR_SEQ:control_5\ ,
        control_4 => \ADC_SAR:bSAR_SEQ:control_4\ ,
        control_3 => \ADC_SAR:bSAR_SEQ:control_3\ ,
        control_2 => \ADC_SAR:bSAR_SEQ:control_2\ ,
        control_1 => \ADC_SAR:bSAR_SEQ:load_period\ ,
        control_0 => \ADC_SAR:bSAR_SEQ:enable\ );
    Properties:
    {
        cy_ctrl_mode_0 = "00000111"
        cy_ctrl_mode_1 = "00000110"
        cy_ext_reset = 0
        cy_force_order = 1
        cy_init_value = "00000000"
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(3,5)] contents:
LAB@[UDB=(3,5)][LB=0] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_49\, Mode=(D-Register) @ [UDB=(3,5)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(3,5)][LB=1] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_31\, Mode=(D-Register) @ [UDB=(3,5)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

Intr hod @ [IntrHod=(0)]: 
  Intr@ [IntrHod=(0)][IntrId=(0)] 
    interrupt: Name =\ADC_SAR:IRQ\
        PORT MAP (
            interrupt => Net_1094 );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(1)] 
    interrupt: Name =isr
        PORT MAP (
            interrupt => Net_684 );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(16)] 
    interrupt: Name =\CAN:isr\
        PORT MAP (
            interrupt => Net_715 );
        Properties:
        {
            int_type = "10"
        }
Drq hod @ [DrqHod=(0)]: 
  Dma@ [DrqHod=(0)][DrqId=(0)] 
    drqcell: Name =\ADC_SAR:FinalBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3698\ ,
            termin => zero ,
            termout => \ADC_SAR:nrq\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
  Dma@ [DrqHod=(0)][DrqId=(1)] 
    drqcell: Name =\ADC_SAR:TempBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3830\ ,
            termin => zero ,
            termout => \ADC_SAR:Net_3698\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
Port 0 contains the following IO cells:
[IoId=0]: 
Pin : Name = Rx_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: NOSYNC
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_DIGITAL
        VTrip: CMOS
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL, ROUTABLE
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Rx_1(0)__PA ,
        fb => Net_11 ,
        pad => Rx_1(0)_PAD );
    Properties:
    {
    }

[IoId=1]: 
Pin : Name = Tx_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL, ROUTABLE
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Tx_1(0)__PA ,
        input => Net_710 ,
        pad => Tx_1(0)_PAD );
    Properties:
    {
    }

Port 1 is empty
Port 2 contains the following IO cells:
[IoId=0]: 
Pin : Name = \LCD:LCDPort(0)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(0)\__PA ,
        pad => \LCD:LCDPort(0)_PAD\ );
    Properties:
    {
    }

[IoId=1]: 
Pin : Name = \LCD:LCDPort(1)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(1)\__PA ,
        pad => \LCD:LCDPort(1)_PAD\ );
    Properties:
    {
    }

[IoId=2]: 
Pin : Name = \LCD:LCDPort(2)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(2)\__PA ,
        pad => \LCD:LCDPort(2)_PAD\ );
    Properties:
    {
    }

[IoId=3]: 
Pin : Name = \LCD:LCDPort(3)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(3)\__PA ,
        pad => \LCD:LCDPort(3)_PAD\ );
    Properties:
    {
    }

[IoId=4]: 
Pin : Name = \LCD:LCDPort(4)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(4)\__PA ,
        pad => \LCD:LCDPort(4)_PAD\ );
    Properties:
    {
    }

[IoId=5]: 
Pin : Name = \LCD:LCDPort(5)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(5)\__PA ,
        pad => \LCD:LCDPort(5)_PAD\ );
    Properties:
    {
    }

[IoId=6]: 
Pin : Name = \LCD:LCDPort(6)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(6)\__PA ,
        pad => \LCD:LCDPort(6)_PAD\ );
    Properties:
    {
    }

Port 3 contains the following IO cells:
[IoId=2]: 
Pin : Name = Throttle_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Throttle_1(0)__PA ,
        analog_term => Net_490 ,
        pad => Throttle_1(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ );
    Properties:
    {
    }

[IoId=3]: 
Pin : Name = Throttle_2(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Throttle_2(0)__PA ,
        analog_term => Net_491 ,
        pad => Throttle_2(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ );
    Properties:
    {
    }

[IoId=4]: 
Pin : Name = Brake_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Brake_1(0)__PA ,
        analog_term => Net_493 ,
        pad => Brake_1(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ );
    Properties:
    {
    }

[IoId=5]: 
Pin : Name = Brake_2(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Brake_2(0)__PA ,
        analog_term => Net_494 ,
        pad => Brake_2(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ );
    Properties:
    {
    }

[IoId=6]: 
Pin : Name = Steering(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Steering(0)__PA ,
        analog_term => Net_496 ,
        pad => Steering(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ );
    Properties:
    {
    }

Port 4 is empty
Port 5 is empty
Port 6 contains the following IO cells:
[IoId=1]: 
Pin : Name = Button(0)
    Attributes:
        In Group/Port: True
        In Sync Option: SYNC
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: RES_PULL_UP
        VTrip: CMOS
        Slew: FAST
        Input Sync needed: True
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL, ROUTABLE
        Initial Value: 1
        IO Voltage: 0
    PORT MAP (
        pa_out => Button(0)__PA ,
        pad => Button(0)_PAD );
    Properties:
    {
    }

[IoId=3]: 
Pin : Name = LED(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => LED(0)__PA ,
        pad => LED(0)_PAD );
    Properties:
    {
    }

Port 12 is empty
Port 15 is empty
Fixed Function block hod @ [FFB(CAN,0)]: 
    CAN Block @ [FFB(CAN,0)]: 
    cancell: Name =\CAN:CanIP\
        PORT MAP (
            clock => ClockBlock_BUS_CLK ,
            can_rx => Net_11 ,
            can_tx => Net_710 ,
            can_tx_en => Net_714 ,
            interrupt => Net_715 );
        Properties:
        {
            cy_registers = ""
        }
Fixed Function block hod @ [FFB(Cache,0)]: empty
Fixed Function block hod @ [FFB(CapSense,0)]: empty
Fixed Function block hod @ [FFB(Clock,0)]: 
    Clock Block @ [FFB(Clock,0)]: 
    clockblockcell: Name =ClockBlock
        PORT MAP (
            clk_bus_glb => ClockBlock_BUS_CLK ,
            clk_bus => ClockBlock_BUS_CLK_local ,
            clk_sync => ClockBlock_MASTER_CLK ,
            clk_32k_xtal => ClockBlock_XTAL_32KHZ ,
            xtal => ClockBlock_XTAL ,
            ilo => ClockBlock_ILO ,
            clk_100k => ClockBlock_100k ,
            clk_1k => ClockBlock_1k ,
            clk_32k => ClockBlock_32k ,
            pllout => ClockBlock_PLL_OUT ,
            imo => ClockBlock_IMO ,
            dclk_glb_0 => \ADC_SAR:clock\ ,
            dclk_0 => \ADC_SAR:clock_local\ ,
            dclk_glb_1 => Net_10 ,
            dclk_1 => Net_10_local );
        Properties:
        {
        }
Fixed Function block hod @ [FFB(Comparator,0)]: empty
Fixed Function block hod @ [FFB(DFB,0)]: empty
Fixed Function block hod @ [FFB(DSM,0)]: empty
Fixed Function block hod @ [FFB(Decimator,0)]: empty
Fixed Function block hod @ [FFB(EMIF,0)]: empty
Fixed Function block hod @ [FFB(I2C,0)]: empty
Fixed Function block hod @ [FFB(LCD,0)]: empty
Fixed Function block hod @ [FFB(LVD,0)]: empty
Fixed Function block hod @ [FFB(PM,0)]: empty
Fixed Function block hod @ [FFB(SC,0)]: empty
Fixed Function block hod @ [FFB(SPC,0)]: empty
Fixed Function block hod @ [FFB(Timer,0)]: empty
Fixed Function block hod @ [FFB(USB,0)]: empty
Fixed Function block hod @ [FFB(VIDAC,0)]: empty
Fixed Function block hod @ [FFB(OpAmp,0)]: empty
Fixed Function block hod @ [FFB(CsAbuf,0)]: empty
Fixed Function block hod @ [FFB(Vref,0)]: 
    Vref Block @ [FFB(Vref,13)]: 
    vrefcell: Name =\ADC_SAR:SAR:vRef_Vdda_1\
        PORT MAP (
            vout => \ADC_SAR:SAR:Net_248\ );
        Properties:
        {
            autoenable = 1
            guid = "4720866E-BC14-478d-B8A0-3E44F38CADAC"
            ignoresleep = 0
            name = "Vdda/2"
        }
Fixed Function block hod @ [FFB(LPF,0)]: empty
Fixed Function block hod @ [FFB(SAR,0)]: 
    SAR @ [FFB(SAR,1)]: 
    sarcell: Name =\ADC_SAR:SAR:ADC_SAR\
        PORT MAP (
            vplus => \ADC_SAR:Net_2803\ ,
            vminus => \ADC_SAR:SAR:Net_126\ ,
            ext_pin => \ADC_SAR:SAR:Net_215\ ,
            vrefhi_out => \ADC_SAR:SAR:Net_126\ ,
            vref => \ADC_SAR:SAR:Net_248\ ,
            clk_udb => \ADC_SAR:clock_local\ ,
            irq => \ADC_SAR:SAR:Net_252\ ,
            next => Net_924 ,
            data_out_udb_11 => \ADC_SAR:SAR:Net_207_11\ ,
            data_out_udb_10 => \ADC_SAR:SAR:Net_207_10\ ,
            data_out_udb_9 => \ADC_SAR:SAR:Net_207_9\ ,
            data_out_udb_8 => \ADC_SAR:SAR:Net_207_8\ ,
            data_out_udb_7 => \ADC_SAR:SAR:Net_207_7\ ,
            data_out_udb_6 => \ADC_SAR:SAR:Net_207_6\ ,
            data_out_udb_5 => \ADC_SAR:SAR:Net_207_5\ ,
            data_out_udb_4 => \ADC_SAR:SAR:Net_207_4\ ,
            data_out_udb_3 => \ADC_SAR:SAR:Net_207_3\ ,
            data_out_udb_2 => \ADC_SAR:SAR:Net_207_2\ ,
            data_out_udb_1 => \ADC_SAR:SAR:Net_207_1\ ,
            data_out_udb_0 => \ADC_SAR:SAR:Net_207_0\ ,
            eof_udb => \ADC_SAR:Net_3830\ );
        Properties:
        {
            cy_registers = ""
        }

Blocks not positioned by the digital component placer:
    Amux Block @ <No Location>: 
    amuxcell: Name =\ADC_SAR:AMuxHw_2\
        PORT MAP (
            muxin_63 => Net_1015 ,
            muxin_62 => Net_1014 ,
            muxin_61 => Net_1013 ,
            muxin_60 => Net_1012 ,
            muxin_59 => Net_1011 ,
            muxin_58 => Net_1010 ,
            muxin_57 => Net_1009 ,
            muxin_56 => Net_1008 ,
            muxin_55 => Net_1007 ,
            muxin_54 => Net_1006 ,
            muxin_53 => Net_1005 ,
            muxin_52 => Net_1004 ,
            muxin_51 => Net_1003 ,
            muxin_50 => Net_1002 ,
            muxin_49 => Net_1001 ,
            muxin_48 => Net_1000 ,
            muxin_47 => Net_999 ,
            muxin_46 => Net_997 ,
            muxin_45 => Net_995 ,
            muxin_44 => Net_994 ,
            muxin_43 => Net_992 ,
            muxin_42 => Net_990 ,
            muxin_41 => Net_989 ,
            muxin_40 => Net_987 ,
            muxin_39 => Net_985 ,
            muxin_38 => Net_984 ,
            muxin_37 => Net_982 ,
            muxin_36 => Net_980 ,
            muxin_35 => Net_979 ,
            muxin_34 => Net_977 ,
            muxin_33 => Net_975 ,
            muxin_32 => Net_974 ,
            muxin_31 => Net_972 ,
            muxin_30 => Net_970 ,
            muxin_29 => Net_969 ,
            muxin_28 => Net_967 ,
            muxin_27 => Net_965 ,
            muxin_26 => Net_964 ,
            muxin_25 => Net_962 ,
            muxin_24 => Net_960 ,
            muxin_23 => Net_959 ,
            muxin_22 => Net_957 ,
            muxin_21 => Net_955 ,
            muxin_20 => Net_954 ,
            muxin_19 => Net_952 ,
            muxin_18 => Net_950 ,
            muxin_17 => Net_949 ,
            muxin_16 => Net_947 ,
            muxin_15 => Net_945 ,
            muxin_14 => Net_944 ,
            muxin_13 => Net_942 ,
            muxin_12 => Net_940 ,
            muxin_11 => Net_939 ,
            muxin_10 => Net_937 ,
            muxin_9 => Net_935 ,
            muxin_8 => Net_934 ,
            muxin_7 => Net_932 ,
            muxin_6 => Net_930 ,
            muxin_5 => Net_929 ,
            muxin_4 => Net_496 ,
            muxin_3 => Net_494 ,
            muxin_2 => Net_493 ,
            muxin_1 => Net_491 ,
            muxin_0 => Net_490 ,
            hw_ctrl_en_63 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ ,
            hw_ctrl_en_62 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ ,
            hw_ctrl_en_61 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ ,
            hw_ctrl_en_60 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ ,
            hw_ctrl_en_59 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ ,
            hw_ctrl_en_58 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ ,
            hw_ctrl_en_57 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ ,
            hw_ctrl_en_56 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ ,
            hw_ctrl_en_55 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ ,
            hw_ctrl_en_54 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ ,
            hw_ctrl_en_53 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ ,
            hw_ctrl_en_52 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ ,
            hw_ctrl_en_51 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ ,
            hw_ctrl_en_50 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ ,
            hw_ctrl_en_49 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ ,
            hw_ctrl_en_48 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ ,
            hw_ctrl_en_47 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ ,
            hw_ctrl_en_46 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ ,
            hw_ctrl_en_45 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ ,
            hw_ctrl_en_44 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ ,
            hw_ctrl_en_43 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ ,
            hw_ctrl_en_42 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ ,
            hw_ctrl_en_41 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ ,
            hw_ctrl_en_40 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ ,
            hw_ctrl_en_39 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ ,
            hw_ctrl_en_38 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ ,
            hw_ctrl_en_37 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ ,
            hw_ctrl_en_36 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ ,
            hw_ctrl_en_35 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ ,
            hw_ctrl_en_34 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ ,
            hw_ctrl_en_33 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ ,
            hw_ctrl_en_32 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ ,
            hw_ctrl_en_31 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ ,
            hw_ctrl_en_30 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ ,
            hw_ctrl_en_29 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ ,
            hw_ctrl_en_28 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ ,
            hw_ctrl_en_27 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ ,
            hw_ctrl_en_26 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ ,
            hw_ctrl_en_25 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ ,
            hw_ctrl_en_24 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ ,
            hw_ctrl_en_23 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ ,
            hw_ctrl_en_22 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ ,
            hw_ctrl_en_21 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ ,
            hw_ctrl_en_20 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ ,
            hw_ctrl_en_19 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ ,
            hw_ctrl_en_18 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ ,
            hw_ctrl_en_17 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ ,
            hw_ctrl_en_16 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ ,
            hw_ctrl_en_15 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ ,
            hw_ctrl_en_14 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ ,
            hw_ctrl_en_13 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ ,
            hw_ctrl_en_12 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ ,
            hw_ctrl_en_11 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ ,
            hw_ctrl_en_10 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ ,
            hw_ctrl_en_9 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ ,
            hw_ctrl_en_8 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ ,
            hw_ctrl_en_7 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ ,
            hw_ctrl_en_6 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ ,
            hw_ctrl_en_5 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ ,
            vout => \ADC_SAR:Net_2803\ );
        Properties:
        {
            api_type = 2
            connect_mode = 1
            cy_registers = ""
            hw_control = 1
            init_mux_sel = "0000000000000000000000000000000000000000000000000000000000000000"
            muxin_width = 64
            one_active = 1
        }
</CYPRESSTAG>
<CYPRESSTAG name="Port Configuration Details">

------------------------------------------------------------
Port Configuration report
------------------------------------------------------------
     |     |       | Interrupt |                  |                  | 
Port | Pin | Fixed |      Type |       Drive Mode |             Name | Connections
-----+-----+-------+-----------+------------------+------------------+----------------------------------------------------------
   0 |   0 |       |      NONE |     HI_Z_DIGITAL |          Rx_1(0) | FB(Net_11)
     |   1 |       |      NONE |         CMOS_OUT |          Tx_1(0) | In(Net_710)
-----+-----+-------+-----------+------------------+------------------+----------------------------------------------------------
   2 |   0 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(0)\ | 
     |   1 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(1)\ | 
     |   2 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(2)\ | 
     |   3 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(3)\ | 
     |   4 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(4)\ | 
     |   5 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(5)\ | 
     |   6 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(6)\ | 
-----+-----+-------+-----------+------------------+------------------+----------------------------------------------------------
   3 |   2 |     * |      NONE |      HI_Z_ANALOG |    Throttle_1(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\), Analog(Net_490)
     |   3 |     * |      NONE |      HI_Z_ANALOG |    Throttle_2(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\), Analog(Net_491)
     |   4 |     * |      NONE |      HI_Z_ANALOG |       Brake_1(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\), Analog(Net_493)
     |   5 |     * |      NONE |      HI_Z_ANALOG |       Brake_2(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\), Analog(Net_494)
     |   6 |     * |      NONE |      HI_Z_ANALOG |      Steering(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\), Analog(Net_496)
-----+-----+-------+-----------+------------------+------------------+----------------------------------------------------------
   6 |   1 |     * |      NONE |      RES_PULL_UP |        Button(0) | 
     |   3 |     * |      NONE |         CMOS_OUT |           LED(0) | 
--------------------------------------------------------------------------------------------------------------------------------
</CYPRESSTAG>
</CYPRESSTAG>
</CYPRESSTAG>
Digital component placer commit/Report: Elapsed time ==> 0s.055ms
Digital Placement phase: Elapsed time ==> 3s.973ms
</CYPRESSTAG>
<CYPRESSTAG name="Digital Routing">
Routing successful.
Digital Routing phase: Elapsed time ==> 3s.501ms
</CYPRESSTAG>
<CYPRESSTAG name="Bitstream and API generation">
Bitstream and API generation phase: Elapsed time ==> 0s.258ms
</CYPRESSTAG>
<CYPRESSTAG name="Bitstream verification">
Bitstream verification phase: Elapsed time ==> 0s.060ms
</CYPRESSTAG>
<CYPRESSTAG name="Static timing analysis">
Timing report is in Node-Elephant_timing.html.
Static timing analysis phase: Elapsed time ==> 0s.472ms
</CYPRESSTAG>
<CYPRESSTAG name="Data reporting">
Data reporting phase: Elapsed time ==> 0s.000ms
</CYPRESSTAG>
<CYPRESSTAG name="Database update...">
Design database save phase: Elapsed time ==> 0s.222ms
</CYPRESSTAG>
cydsfit: Elapsed time ==> 15s.583ms
</CYPRESSTAG>
Fitter phase: Elapsed time ==> 15s.621ms
API generation phase: Elapsed time ==> 2s.719ms
Dependency generation phase: Elapsed time ==> 0s.003ms
Cleanup phase: Elapsed time ==> 0s.000ms
