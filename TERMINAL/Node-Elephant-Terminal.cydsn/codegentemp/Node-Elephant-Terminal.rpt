Loading plugins phase: Elapsed time ==> 0s.240ms
Initializing data phase: Elapsed time ==> 0s.000ms
<CYPRESSTAG name="CyDsfit arguments...">
cydsfit arguments: -.fdsnotice -.fdswarpdepfile=warp_dependencies.txt -.fdselabdepfile=elab_dependencies.txt -.fdsbldfile=generated_files.txt -p C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -d CY8C5868AXI-LP035 -s C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Generated_Source\PSoC5 -- -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE</CYPRESSTAG>
<CYPRESSTAG name="Design elaboration results...">
ADD: sdb.M0065: information: Analog terminal "vdac_ref" on ADC_SAR_SEQ_v2_0 is unconnected.
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v2_0\PSoC5\ADC_SAR_SEQ_v2_0.cysch (Signal: vdac_ref)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v2_0\PSoC5\ADC_SAR_SEQ_v2_0.cysch (Shape_798)
 * C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_SAR_SEQ_v2_0\PSoC5\ADC_SAR_SEQ_v2_0.cysch (Shape_885)

</CYPRESSTAG>
Elaboration phase: Elapsed time ==> 1s.956ms
<CYPRESSTAG name="HDL generation results...">
</CYPRESSTAG>
HDL generation phase: Elapsed time ==> 0s.050ms
<CYPRESSTAG name="Synthesis results...">

     | | | | | | |
   _________________
  -|               |-
  -|               |-
  -|               |-
  -|    CYPRESS    |-
  -|               |-
  -|               |-   Warp Verilog Synthesis Compiler: Version 6.3 IR 41
  -|               |-   Copyright (C) 1991-2001 Cypress Semiconductor
   |_______________|
     | | | | | | |

======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\bin/warp.exe
Options  :    -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -dcpsoc3 Node-Elephant-Terminal.v -verilog
======================================================================

======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\bin/warp.exe
Options  :    -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -dcpsoc3 Node-Elephant-Terminal.v -verilog
======================================================================

======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   vlogfe
Options  :    -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -dcpsoc3 -verilog Node-Elephant-Terminal.v
======================================================================

vlogfe V6.3 IR 41:  Verilog parser
Thu May 28 04:44:57 2015


======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   vpp
Options  :    -yv2 -q10 Node-Elephant-Terminal.v
======================================================================

vpp V6.3 IR 41:  Verilog Pre-Processor
Thu May 28 04:44:57 2015

Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v2_0\ADC_AMUX_v2_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_constant_v1_0\cy_constant_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v2_0\bADC_SAR_SEQ_v2_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\..\psoc\content\cyprimitives\CyPrimitives.cylib\cy_sync_v1_0\cy_sync_v1_0.v'
Flattening file 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.v'

vpp:  No errors.

Library 'work' => directory 'lcpsoc3'
General_symbol_table
General_symbol_table
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Using control file 'Node-Elephant-Terminal.ctl'.
Node-Elephant-Terminal.v (line 1077, col 82):  Note: Substituting module 'cmp_vv_vv' for '='.

vlogfe:  No errors.


======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   tovif
Options  :    -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -dcpsoc3 -verilog Node-Elephant-Terminal.v
======================================================================

tovif V6.3 IR 41:  High-level synthesis
Thu May 28 04:44:57 2015

Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Linking 'C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\codegentemp\Node-Elephant-Terminal.ctl'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'.
Linking 'C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\codegentemp\Node-Elephant-Terminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v2_0\ADC_AMUX_v2_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_constant_v1_0\cy_constant_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v2_0\bADC_SAR_SEQ_v2_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_sync_v1_0\cy_sync_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mcompare.vif'.

tovif:  No errors.


======================================================================
Compiling:  Node-Elephant-Terminal.v
Program  :   topld
Options  :    -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -dcpsoc3 -verilog Node-Elephant-Terminal.v
======================================================================

topld V6.3 IR 41:  Synthesis and optimization
Thu May 28 04:44:57 2015

Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\std.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.vhd'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\work\cypress.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\ieee\work\stdlogic.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\lpmpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\rtlpkg.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_cnst.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_mthv.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mod_genv.vif'.
Linking 'C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\codegentemp\Node-Elephant-Terminal.ctl'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_virtualmux_v1_0\cy_virtualmux_v1_0.v'.
Linking 'C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\codegentemp\Node-Elephant-Terminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\ZeroTerminal\ZeroTerminal.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\ADC_AMUX_v2_0\ADC_AMUX_v2_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cypress.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\cy_psoc3_inc.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_analog_virtualmux_v1_0\cy_analog_virtualmux_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_vref_v1_60\cy_vref_v1_60.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\or_v1_0\or_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_constant_v1_0\cy_constant_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cycomponentlibrary\CyComponentLibrary.cylib\bADC_SAR_SEQ_v2_0\bADC_SAR_SEQ_v2_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\psoc\content\cyprimitives\CyPrimitives.cylib\cy_sync_v1_0\cy_sync_v1_0.v'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\common\stdlogic\mcompare.vif'.
Linking 'C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\lib\lcpsoc3\stdlogic\cpsoc3.vif'.

----------------------------------------------------------
Detecting unused logic.
----------------------------------------------------------
    User names
	\USBUART:dma_nrq_0\
	\USBUART:Net_1800\
	\USBUART:dma_nrq_3\
	\USBUART:Net_1803\
	\USBUART:Net_1801\
	\USBUART:dma_nrq_1\
	\USBUART:dma_nrq_4\
	\USBUART:Net_1804\
	\USBUART:dma_nrq_5\
	\USBUART:Net_1805\
	\USBUART:dma_nrq_6\
	\USBUART:Net_1806\
	\USBUART:dma_nrq_7\
	\USBUART:Net_1807\
	\USBUART:dma_nrq_2\
	\USBUART:Net_1802\
	\ADC_SAR:SAR:Net_221\
	\ADC_SAR:SAR:Net_381\
	\ADC_SAR:bSAR_SEQ:sw_soc\
	\ADC_SAR:soc_out\
	\ADC_SAR:Net_3905\
	\ADC_SAR:Net_3867\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_2\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_2\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_1\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_1\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:albi_0\
	\ADC_SAR:MODULE_1:g1:a0:gx:u0:agbi_0\
	\ADC_SAR:MODULE_1:g1:a0:xneq\
	\ADC_SAR:MODULE_1:g1:a0:xlt\
	\ADC_SAR:MODULE_1:g1:a0:xlte\
	\ADC_SAR:MODULE_1:g1:a0:xgt\
	\ADC_SAR:MODULE_1:g1:a0:xgte\
	\ADC_SAR:MODULE_1:lt\
	\ADC_SAR:MODULE_1:gt\
	\ADC_SAR:MODULE_1:gte\
	\ADC_SAR:MODULE_1:lte\
	\ADC_SAR:MODULE_1:neq\


Deleted 38 User equations/components.
Deleted 0 Synthesized equations/components.

------------------------------------------------------
Alias Detection
------------------------------------------------------
Aliasing one to \USBUART:tmpOE__Dm_net_0\
Aliasing \USBUART:tmpOE__Dp_net_0\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_6\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_5\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_4\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_3\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_2\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_1\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \LCD:tmpOE__LCDPort_net_0\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_enable\ to \USBUART:tmpOE__Dm_net_0\
Aliasing \ADC_SAR:SAR:vp_ctl_0\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_2\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_1\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_3\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_1\ to zero
Aliasing \ADC_SAR:SAR:vp_ctl_3\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_0\ to zero
Aliasing \ADC_SAR:SAR:vn_ctl_2\ to zero
Aliasing \ADC_SAR:SAR:soc\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_7\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_6\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_5\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_4\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_3\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_2\ to zero
Aliasing \ADC_SAR:bSAR_SEQ:status_1\ to zero
Aliasing Net_6 to \ADC_SAR:bSAR_SEQ:status_0\
Aliasing \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_0\ to \USBUART:tmpOE__Dm_net_0\
Aliasing tmpOE__Throttle_1_net_0 to \USBUART:tmpOE__Dm_net_0\
Aliasing tmpOE__Throttle_2_net_0 to \USBUART:tmpOE__Dm_net_0\
Aliasing tmpOE__Brake_1_net_0 to \USBUART:tmpOE__Dm_net_0\
Aliasing tmpOE__Brake_2_net_0 to \USBUART:tmpOE__Dm_net_0\
Aliasing tmpOE__Steering_net_0 to \USBUART:tmpOE__Dm_net_0\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_5\\D\ to \ADC_SAR:MODIN1_5\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_4\\D\ to \ADC_SAR:MODIN1_4\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_3\\D\ to \ADC_SAR:MODIN1_3\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_2\\D\ to \ADC_SAR:MODIN1_2\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_1\\D\ to \ADC_SAR:MODIN1_1\
Aliasing \ADC_SAR:AMuxHw_2_Decoder_old_id_0\\D\ to \ADC_SAR:MODIN1_0\
Removing Rhs of wire one[37] = \USBUART:tmpOE__Dm_net_0\[31]
Removing Lhs of wire \USBUART:tmpOE__Dp_net_0\[40] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_6\[67] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_5\[68] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_4\[69] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_3\[70] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_2\[71] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_1\[72] = one[37]
Removing Lhs of wire \LCD:tmpOE__LCDPort_net_0\[73] = one[37]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_enable\[90] = one[37]
Removing Lhs of wire \ADC_SAR:cmp_vv_vv_MODGEN_1\[92] = \ADC_SAR:MODULE_1:g1:a0:xeq\[427]
Removing Rhs of wire \ADC_SAR:clock\[93] = \ADC_SAR:Net_3874\[327]
Removing Rhs of wire \ADC_SAR:ch_addr_5\[95] = \ADC_SAR:bSAR_SEQ:count_5\[294]
Removing Rhs of wire \ADC_SAR:ch_addr_4\[97] = \ADC_SAR:bSAR_SEQ:count_4\[295]
Removing Rhs of wire \ADC_SAR:ch_addr_3\[99] = \ADC_SAR:bSAR_SEQ:count_3\[296]
Removing Rhs of wire \ADC_SAR:ch_addr_2\[101] = \ADC_SAR:bSAR_SEQ:count_2\[297]
Removing Rhs of wire \ADC_SAR:ch_addr_1\[103] = \ADC_SAR:bSAR_SEQ:count_1\[298]
Removing Rhs of wire \ADC_SAR:ch_addr_0\[105] = \ADC_SAR:bSAR_SEQ:count_0\[299]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_0\[239] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_2\[240] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_1\[241] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_3\[242] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_1\[243] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vp_ctl_3\[244] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_0\[245] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:vn_ctl_2\[246] = zero[32]
Removing Lhs of wire \ADC_SAR:SAR:Net_188\[247] = \ADC_SAR:clock\[93]
Removing Lhs of wire \ADC_SAR:SAR:soc\[253] = zero[32]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:enable\[284] = \ADC_SAR:bSAR_SEQ:control_0\[285]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:load_period\[286] = \ADC_SAR:bSAR_SEQ:control_1\[287]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_7\[300] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_6\[301] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_5\[302] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_4\[303] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_3\[304] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_2\[305] = zero[32]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:status_1\[306] = zero[32]
Removing Rhs of wire \ADC_SAR:bSAR_SEQ:status_0\[307] = \ADC_SAR:bSAR_SEQ:nrq_edge_detect_reg\[308]
Removing Rhs of wire Net_6[315] = \ADC_SAR:bSAR_SEQ:status_0\[307]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_5\[338] = \ADC_SAR:MODIN1_5\[339]
Removing Lhs of wire \ADC_SAR:MODIN1_5\[339] = \ADC_SAR:ch_addr_5\[95]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_4\[340] = \ADC_SAR:MODIN1_4\[341]
Removing Lhs of wire \ADC_SAR:MODIN1_4\[341] = \ADC_SAR:ch_addr_4\[97]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_3\[342] = \ADC_SAR:MODIN1_3\[343]
Removing Lhs of wire \ADC_SAR:MODIN1_3\[343] = \ADC_SAR:ch_addr_3\[99]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_2\[344] = \ADC_SAR:MODIN1_2\[345]
Removing Lhs of wire \ADC_SAR:MODIN1_2\[345] = \ADC_SAR:ch_addr_2\[101]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_1\[346] = \ADC_SAR:MODIN1_1\[347]
Removing Lhs of wire \ADC_SAR:MODIN1_1\[347] = \ADC_SAR:ch_addr_1\[103]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newa_0\[348] = \ADC_SAR:MODIN1_0\[349]
Removing Lhs of wire \ADC_SAR:MODIN1_0\[349] = \ADC_SAR:ch_addr_0\[105]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_5\[350] = \ADC_SAR:MODIN2_5\[351]
Removing Lhs of wire \ADC_SAR:MODIN2_5\[351] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[94]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_4\[352] = \ADC_SAR:MODIN2_4\[353]
Removing Lhs of wire \ADC_SAR:MODIN2_4\[353] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[96]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_3\[354] = \ADC_SAR:MODIN2_3\[355]
Removing Lhs of wire \ADC_SAR:MODIN2_3\[355] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[98]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_2\[356] = \ADC_SAR:MODIN2_2\[357]
Removing Lhs of wire \ADC_SAR:MODIN2_2\[357] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[100]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_1\[358] = \ADC_SAR:MODIN2_1\[359]
Removing Lhs of wire \ADC_SAR:MODIN2_1\[359] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[102]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:newb_0\[360] = \ADC_SAR:MODIN2_0\[361]
Removing Lhs of wire \ADC_SAR:MODIN2_0\[361] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[104]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_5\[362] = \ADC_SAR:ch_addr_5\[95]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_4\[363] = \ADC_SAR:ch_addr_4\[97]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_3\[364] = \ADC_SAR:ch_addr_3\[99]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_2\[365] = \ADC_SAR:ch_addr_2\[101]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_1\[366] = \ADC_SAR:ch_addr_1\[103]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:dataa_0\[367] = \ADC_SAR:ch_addr_0\[105]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_5\[368] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[94]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_4\[369] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[96]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_3\[370] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[98]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_2\[371] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[100]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_1\[372] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[102]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:datab_0\[373] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[104]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_5\[374] = \ADC_SAR:ch_addr_5\[95]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_4\[375] = \ADC_SAR:ch_addr_4\[97]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_3\[376] = \ADC_SAR:ch_addr_3\[99]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_2\[377] = \ADC_SAR:ch_addr_2\[101]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_1\[378] = \ADC_SAR:ch_addr_1\[103]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:a_0\[379] = \ADC_SAR:ch_addr_0\[105]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_5\[380] = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\[94]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_4\[381] = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\[96]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_3\[382] = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\[98]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_2\[383] = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\[100]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_1\[384] = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\[102]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:b_0\[385] = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\[104]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_0\[392] = one[37]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_0\[393] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\[391]
Removing Lhs of wire \ADC_SAR:MODULE_1:g1:a0:gx:u0:eqi_0\[399] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\[398]
Removing Rhs of wire \ADC_SAR:MODULE_1:g1:a0:xeq\[427] = \ADC_SAR:MODULE_1:g1:a0:gx:u0:aeqb_1\[400]
Removing Lhs of wire tmpOE__Throttle_1_net_0[439] = one[37]
Removing Lhs of wire tmpOE__Throttle_2_net_0[445] = one[37]
Removing Lhs of wire tmpOE__Brake_1_net_0[451] = one[37]
Removing Lhs of wire tmpOE__Brake_2_net_0[457] = one[37]
Removing Lhs of wire tmpOE__Steering_net_0[463] = one[37]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_5\\D\[468] = \ADC_SAR:ch_addr_5\[95]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_4\\D\[469] = \ADC_SAR:ch_addr_4\[97]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_3\\D\[470] = \ADC_SAR:ch_addr_3\[99]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_2\\D\[471] = \ADC_SAR:ch_addr_2\[101]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_1\\D\[472] = \ADC_SAR:ch_addr_1\[103]
Removing Lhs of wire \ADC_SAR:AMuxHw_2_Decoder_old_id_0\\D\[473] = \ADC_SAR:ch_addr_0\[105]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:nrq_edge_detect_reg\\D\[538] = \ADC_SAR:bSAR_SEQ:nrq_edge_detect\[314]
Removing Lhs of wire \ADC_SAR:bSAR_SEQ:nrq_reg\\D\[540] = \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\[311]

------------------------------------------------------
Aliased 0 equations, 104 wires.
------------------------------------------------------

----------------------------------------------------------
Circuit simplification
----------------------------------------------------------

Substituting virtuals - pass 1:

Note:  Expanding virtual equation for 'one' (cost = 0):
one <=  ('1') ;

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_5\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_5\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_2\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_2\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\' (cost = 4):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:xnor_array_0\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_1\' (cost = 8):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_2\' (cost = 16):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_2\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_3\' (cost = 32):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_4\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:eq_5\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_3\ <= ((not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_3\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_3\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_4\ <= ((not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\)
	OR (not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\)
	OR (not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_4\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_4\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_0\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_0\ <= ((not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_0\' (cost = 2):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_0\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_1\ <= ((not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\)
	OR (not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\)
	OR (not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\));

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_1\' (cost = 6):
\ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_1\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\));


Substituting virtuals - pass 2:

Note:  Expanding virtual equation for '\ADC_SAR:MODULE_1:g1:a0:xeq\' (cost = 64):
\ADC_SAR:MODULE_1:g1:a0:xeq\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));


Substituting virtuals - pass 3:

Note:  Virtual signal \ADC_SAR:AMuxHw_2_Decoder_is_active\ with ( cost: 128 or cost_inv: -1)  > 90 or with size: 64 > 102 has been made a (soft) node.
\ADC_SAR:AMuxHw_2_Decoder_is_active\ <= ((not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and not \ADC_SAR:ch_addr_0\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and not \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and not \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and not \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and not \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (not \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and not \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\)
	OR (\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ and \ADC_SAR:ch_addr_5\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ and \ADC_SAR:ch_addr_4\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ and \ADC_SAR:ch_addr_3\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ and \ADC_SAR:ch_addr_2\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ and \ADC_SAR:ch_addr_1\ and \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ and \ADC_SAR:ch_addr_0\));


Substituting virtuals - pass 4:


----------------------------------------------------------
Circuit simplification results:

	Expanded 21 signals.
	Turned 1 signals into soft nodes.
	Maximum default expansion cost was set at 3.
----------------------------------------------------------

------------------------------------------------------
Alias Detection
------------------------------------------------------

------------------------------------------------------
Aliased 0 equations, 0 wires.
------------------------------------------------------

Last attempt to remove unused logic - pass 1:


Last attempt to remove unused logic - pass 2:


topld:  No errors.

CYPRESS_DIR    : C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp
Warp Program   : C:\Program Files (x86)\Cypress\PSoC Creator\3.1\PSoC Creator\warp\bin/warp.exe
Warp Arguments : -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya "-.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj" -dcpsoc3 Node-Elephant-Terminal.v -verilog
</CYPRESSTAG>
Warp synthesis phase: Elapsed time ==> 0s.910ms
<CYPRESSTAG name="Fitter results...">
<CYPRESSTAG name="Fitter startup details...">
cyp3fit: V3.1.0.2288, Family: PSoC3, Started at: Thursday, 28 May 2015 04:44:58
Options: -yv2 -q10 -ygs -o2 -v3 -.fftcfgtype=LE -ya -.fftprj=C:\Users\Chai Yang\Documents\Node-Elephant\TERMINAL\Node-Elephant-Terminal.cydsn\Node-Elephant-Terminal.cyprj -d CY8C5868AXI-LP035 Node-Elephant-Terminal.v -verilog
</CYPRESSTAG>
<CYPRESSTAG name="Design parsing">
Design parsing phase: Elapsed time ==> 0s.030ms
</CYPRESSTAG>
<CYPRESSTAG name="Tech mapping">
<CYPRESSTAG name="Initial Mapping" icon="FILE_RPT_TECHM">
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:lti_0\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_2\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:gti_0\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_2\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:lti_1\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:lt_5\
    Removed wire end \ADC_SAR:MODULE_1:g1:a0:gx:u0:gti_1\ kept \ADC_SAR:MODULE_1:g1:a0:gx:u0:gt_5\
Assigning clock ADC_SAR_BusClock to clock BUS_CLK because it is a pass-through
Assigning clock USBUART_Clock_vbus to clock BUS_CLK because it is a pass-through
<CYPRESSTAG name="Global Clock Selection" icon="FILE_RPT_TECHM">
    Digital Clock 0: Automatic-assigning  clock 'ADC_SAR_IntClock'. Fanout=73, Signal=\ADC_SAR:clock\
</CYPRESSTAG>

Removing unused cells resulting from optimization
Done removing unused cells.
<CYPRESSTAG name="UDB Clock/Enable Remapping Results">
    UDB Clk/Enable \ADC_SAR:bSAR_SEQ:ClkCtrl\: with output requested to be synchronous
        ClockIn: ADC_SAR_IntClock was determined to be a global clock that is synchronous to BUS_CLK
        EnableIn: Constant 1 was determined to be synchronous to ClockIn
        ClockOut: ADC_SAR_IntClock, EnableOut: Constant 1
    UDB Clk/Enable \ADC_SAR:bSAR_SEQ:ClkEn\: with output requested to be synchronous
        ClockIn: ADC_SAR_IntClock was determined to be a global clock that is synchronous to BUS_CLK
        EnableIn: \ADC_SAR:bSAR_SEQ:CtrlReg\:controlcell.control_0 was determined to be synchronous to ClockIn
        ClockOut: ADC_SAR_IntClock, EnableOut: \ADC_SAR:bSAR_SEQ:CtrlReg\:controlcell.control_0
</CYPRESSTAG>
ADD: pft.M0040: information: The following 2 pin(s) will be assigned a location by the fitter: \USBUART:Dm(0)\, \USBUART:Dp(0)\


Removing unused cells resulting from optimization
Done removing unused cells.
<CYPRESSTAG name="Duplicate Macrocell detection">
</CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Duplicate Macrocell detection">
</CYPRESSTAG>
<CYPRESSTAG name="Design Equations" icon="FILE_RPT_EQUATION">

------------------------------------------------------------
Design Equations
------------------------------------------------------------
    <CYPRESSTAG name="Pin listing">

    ------------------------------------------------------------
    Pin listing
    ------------------------------------------------------------

    Pin : Name = Brake_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Brake_1(0)__PA ,
            analog_term => Net_10 ,
            pad => Brake_1(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ );
        Properties:
        {
        }

    Pin : Name = Brake_2(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Brake_2(0)__PA ,
            analog_term => Net_11 ,
            pad => Brake_2(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ );
        Properties:
        {
        }

    Pin : Name = Steering(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Steering(0)__PA ,
            analog_term => Net_13 ,
            pad => Steering(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ );
        Properties:
        {
        }

    Pin : Name = Throttle_1(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Throttle_1(0)__PA ,
            analog_term => Net_7 ,
            pad => Throttle_1(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ );
        Properties:
        {
        }

    Pin : Name = Throttle_2(0)
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: ANALOG
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => Throttle_2(0)__PA ,
            analog_term => Net_8 ,
            pad => Throttle_2(0)_PAD ,
            input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(0)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(0)\__PA ,
            pad => \LCD:LCDPort(0)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(1)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(1)\__PA ,
            pad => \LCD:LCDPort(1)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(2)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(2)\__PA ,
            pad => \LCD:LCDPort(2)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(3)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(3)\__PA ,
            pad => \LCD:LCDPort(3)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(4)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(4)\__PA ,
            pad => \LCD:LCDPort(4)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(5)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(5)\__PA ,
            pad => \LCD:LCDPort(5)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \LCD:LCDPort(6)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: NOSYNC
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: CMOS_OUT
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: False
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: DIGITAL
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \LCD:LCDPort(6)\__PA ,
            pad => \LCD:LCDPort(6)_PAD\ );
        Properties:
        {
        }

    Pin : Name = \USBUART:Dm(0)\
        Attributes:
            In Group/Port: True
            In Sync Option: AUTO
            Out Sync Option: AUTO
            Interrupt generated: False
            Interrupt mode: NONE
            Drive mode: HI_Z_ANALOG
            VTrip: EITHER
            Slew: FAST
            Input Sync needed: False
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: True
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: False
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: USB_D_MINUS
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \USBUART:Dm(0)\__PA ,
            analog_term => \USBUART:Net_597\ ,
            pad => \USBUART:Dm(0)_PAD\ );

    Pin : Name = \USBUART:Dp(0)\
        Attributes:
            In Group/Port: True
            In Sync Option: SYNC
            Out Sync Option: AUTO
            Interrupt generated: True
            Interrupt mode: FALLING
            Drive mode: HI_Z_ANALOG
            VTrip: CMOS
            Slew: FAST
            Input Sync needed: True
            Output Sync needed: False
            SC shield enabled: False
            POR State: ANY
            LCD Mode: COMMON
            Register Mode: RegComb
            CaSense Mode: NEITHER
            Treat as pin: False
            Is OE Registered: False
            Uses Analog: True
            Can contain Digital: True
            Is SIO: False
            SIO Output Buf: NONREGULATED
            SIO Input Buf: SINGLE_ENDED
            SIO HiFreq: LOW
            SIO Hyst: DISABLED
            SIO Vtrip: MULTIPLIER_0_5
            SIO RefSel: VCC_IO
            Required Capabilitites: USB_D_PLUS
            Initial Value: 0
            IO Voltage: 0
        PORT MAP (
            pa_out => \USBUART:Dp(0)\__PA ,
            analog_term => \USBUART:Net_1000\ ,
            pad => \USBUART:Dp(0)_PAD\ );
    </CYPRESSTAG>
    <CYPRESSTAG name="Macrocell listing" icon="FILE_RPT_EQUATION">

    ------------------------------------------------------------
    Macrocell listing
    ------------------------------------------------------------

    MacroCell: Name=Net_6, Mode=(D-Register)
        Total # of inputs        : 2
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
        Main Equation            : 1 pterm
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ * 
              !\ADC_SAR:bSAR_SEQ:nrq_reg\
        );
        Output = Net_6 (fanout=3)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active\, Mode=(Combinatorial)
        Total # of inputs        : 9
        Total # of product terms : 5
            Clock Enable: True
        Main Equation            : 5 pterms
        !(
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * \ADC_SAR:ch_addr_5\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * \ADC_SAR:ch_addr_4\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * \ADC_SAR:ch_addr_3\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * \ADC_SAR:ch_addr_2\
            + \ADC_SAR:AMuxHw_2_Decoder_is_active_split\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active\ (fanout=64)
        Properties               : 
        {
            soft = 1
        }

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active_split\, Mode=(Combinatorial)
        Total # of inputs        : 12
        Total # of product terms : 8
            Clock Enable: True
        Main Equation            : 8 pterms
        (
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * !\ADC_SAR:ch_addr_5\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * !\ADC_SAR:ch_addr_4\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * !\ADC_SAR:ch_addr_3\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * !\ADC_SAR:ch_addr_2\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * \ADC_SAR:ch_addr_1\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * !\ADC_SAR:ch_addr_1\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * \ADC_SAR:ch_addr_0\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * !\ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active_split\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_0\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ (fanout=65)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_1\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_1\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ (fanout=65)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_2\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_2\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_3\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_3\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_4\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_4\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_5\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_5\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ (fanout=66)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_10\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_11\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_12\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_13\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_14\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_15\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_16\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_17\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_18\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_19\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_20\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_21\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_22\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_23\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_24\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_25\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_26\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_27\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_28\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_29\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_30\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_31\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_32\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_33\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_34\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_35\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_36\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_37\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_38\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_39\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_40\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_41\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_42\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_43\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_44\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_45\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_46\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_47\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_48\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_49\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_50\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_51\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_52\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_53\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_54\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_55\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_56\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_57\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_58\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_59\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_5\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_60\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_61\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_62\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_63\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_6\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_7\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_8\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ (fanout=1)

    MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_9\, Mode=(D-Register)
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ (fanout=1)

    MacroCell: Name=\ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\, Mode=(D-Register)
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (ClockBlock_BUS_CLK) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ * !Net_6
            + \ADC_SAR:Net_3935\
        );
        Output = \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ (fanout=3)

    MacroCell: Name=\ADC_SAR:bSAR_SEQ:cnt_enable\, Mode=(Combinatorial)
        Total # of inputs        : 2
        Total # of product terms : 1
            Clock Enable: True
        Main Equation            : 1 pterm
        !(
              !Net_5 * !\ADC_SAR:bSAR_SEQ:load_period\
        );
        Output = \ADC_SAR:bSAR_SEQ:cnt_enable\ (fanout=1)

    MacroCell: Name=\ADC_SAR:bSAR_SEQ:nrq_reg\, Mode=(D-Register)
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
        Main Equation            : 1 pterm
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\
        );
        Output = \ADC_SAR:bSAR_SEQ:nrq_reg\ (fanout=1)
    </CYPRESSTAG>
    <CYPRESSTAG name="Datapath listing">
    </CYPRESSTAG>
    <CYPRESSTAG name="Status register listing">

    ------------------------------------------------------------
    Status register listing
    ------------------------------------------------------------

    statuscell: Name =\ADC_SAR:bSAR_SEQ:EOCSts\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            status_0 => Net_6 ,
            clk_en => \ADC_SAR:bSAR_SEQ:enable\ );
        Properties:
        {
            cy_force_order = 1
            cy_md_select = "00000001"
        }
        Clock Polarity: Active High
        Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
    </CYPRESSTAG>
    <CYPRESSTAG name="StatusI register listing">
    </CYPRESSTAG>
    <CYPRESSTAG name="Sync listing">

    ------------------------------------------------------------
    Sync listing
    ------------------------------------------------------------

    synccell: Name =\ADC_SAR:Sync:genblk1[0]:INST\
        PORT MAP (
            clock => ClockBlock_BUS_CLK ,
            in => \ADC_SAR:nrq\ ,
            out => \ADC_SAR:Net_3935\ );
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="Control register listing">

    ------------------------------------------------------------
    Control register listing
    ------------------------------------------------------------

    controlcell: Name =\ADC_SAR:bSAR_SEQ:CtrlReg\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            control_7 => \ADC_SAR:bSAR_SEQ:control_7\ ,
            control_6 => \ADC_SAR:bSAR_SEQ:control_6\ ,
            control_5 => \ADC_SAR:bSAR_SEQ:control_5\ ,
            control_4 => \ADC_SAR:bSAR_SEQ:control_4\ ,
            control_3 => \ADC_SAR:bSAR_SEQ:control_3\ ,
            control_2 => \ADC_SAR:bSAR_SEQ:control_2\ ,
            control_1 => \ADC_SAR:bSAR_SEQ:load_period\ ,
            control_0 => \ADC_SAR:bSAR_SEQ:enable\ );
        Properties:
        {
            cy_ctrl_mode_0 = "00000111"
            cy_ctrl_mode_1 = "00000110"
            cy_ext_reset = 0
            cy_force_order = 1
            cy_init_value = "00000000"
        }
        Clock Polarity: Active High
        Clock Enable: True
    </CYPRESSTAG>
    <CYPRESSTAG name="Count7 listing">

    ------------------------------------------------------------
    Count7 listing
    ------------------------------------------------------------

    count7cell: Name =\ADC_SAR:bSAR_SEQ:ChannelCounter\
        PORT MAP (
            clock => \ADC_SAR:clock\ ,
            load => \ADC_SAR:bSAR_SEQ:load_period\ ,
            enable => \ADC_SAR:bSAR_SEQ:cnt_enable\ ,
            count_6 => \ADC_SAR:bSAR_SEQ:count_6\ ,
            count_5 => \ADC_SAR:ch_addr_5\ ,
            count_4 => \ADC_SAR:ch_addr_4\ ,
            count_3 => \ADC_SAR:ch_addr_3\ ,
            count_2 => \ADC_SAR:ch_addr_2\ ,
            count_1 => \ADC_SAR:ch_addr_1\ ,
            count_0 => \ADC_SAR:ch_addr_0\ ,
            tc => \ADC_SAR:bSAR_SEQ:cnt_tc\ ,
            clk_en => \ADC_SAR:bSAR_SEQ:enable\ );
        Properties:
        {
            cy_alt_mode = 0
            cy_init_value = "0000000"
            cy_period = "0000100"
            cy_route_en = 1
            cy_route_ld = 1
        }
        Clock Polarity: Active High
        Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
    </CYPRESSTAG>
    <CYPRESSTAG name="DRQ listing">

    ------------------------------------------------------------
    DRQ listing
    ------------------------------------------------------------

    drqcell: Name =\ADC_SAR:FinalBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3698\ ,
            termin => zero ,
            termout => \ADC_SAR:nrq\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }

    drqcell: Name =\ADC_SAR:TempBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3830\ ,
            termin => zero ,
            termout => \ADC_SAR:Net_3698\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
    </CYPRESSTAG>
    <CYPRESSTAG name="Interrupt listing">

    ------------------------------------------------------------
    Interrupt listing
    ------------------------------------------------------------

    interrupt: Name =\ADC_SAR:IRQ\
        PORT MAP (
            interrupt => Net_6 );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:arb_int\
        PORT MAP (
            interrupt => \USBUART:Net_79\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:bus_reset\
        PORT MAP (
            interrupt => \USBUART:Net_81\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:dp_int\
        PORT MAP (
            interrupt => \USBUART:Net_1010\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:ep_0\
        PORT MAP (
            interrupt => \USBUART:ept_int_0\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:ep_1\
        PORT MAP (
            interrupt => \USBUART:ept_int_1\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:ep_2\
        PORT MAP (
            interrupt => \USBUART:ept_int_2\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:ep_3\
        PORT MAP (
            interrupt => \USBUART:ept_int_3\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:ord_int\
        PORT MAP (
            interrupt => \USBUART:Net_95\ );
        Properties:
        {
            int_type = "10"
        }

    interrupt: Name =\USBUART:sof_int\
        PORT MAP (
            interrupt => Net_1 );
        Properties:
        {
            int_type = "10"
        }
    </CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Technology mapping summary" expanded>

------------------------------------------------------------
Technology mapping summary
------------------------------------------------------------

Resource Type                 : Used : Free :  Max :  % Used
============================================================
Digital clock dividers        :    1 :    7 :    8 :  12.50%
Analog clock dividers         :    0 :    4 :    4 :   0.00%
Pins                          :   17 :   55 :   72 :  23.61%
UDB Macrocells                :   76 :  116 :  192 :  39.58%
UDB Unique Pterms             :   88 :  296 :  384 :  22.92%
UDB Total Pterms              :   88 :      :      : 
UDB Datapath Cells            :    0 :   24 :   24 :   0.00%
UDB Status Cells              :    3 :   21 :   24 :  12.50%
             Status Registers :    1 
                   Sync Cells :    1 (in 1 status cell)
    Routed Count7 Load/Enable :    1 
UDB Control Cells             :    2 :   22 :   24 :   8.33%
            Control Registers :    1 
                 Count7 Cells :    1 
DMA Channels                  :    2 :   22 :   24 :   8.33%
Interrupts                    :   10 :   22 :   32 :  31.25%
DSM Fixed Blocks              :    0 :    1 :    1 :   0.00%
VIDAC Fixed Blocks            :    0 :    4 :    4 :   0.00%
SC Fixed Blocks               :    0 :    4 :    4 :   0.00%
Comparator Fixed Blocks       :    0 :    4 :    4 :   0.00%
Opamp Fixed Blocks            :    0 :    4 :    4 :   0.00%
CapSense Buffers              :    0 :    2 :    2 :   0.00%
CAN Fixed Blocks              :    0 :    1 :    1 :   0.00%
Decimator Fixed Blocks        :    0 :    1 :    1 :   0.00%
I2C Fixed Blocks              :    0 :    1 :    1 :   0.00%
Timer Fixed Blocks            :    0 :    4 :    4 :   0.00%
DFB Fixed Blocks              :    0 :    1 :    1 :   0.00%
USB Fixed Blocks              :    1 :    0 :    1 : 100.00%
LCD Fixed Blocks              :    0 :    1 :    1 :   0.00%
EMIF Fixed Blocks             :    0 :    1 :    1 :   0.00%
LPF Fixed Blocks              :    0 :    2 :    2 :   0.00%
SAR Fixed Blocks              :    1 :    1 :    2 :  50.00%
</CYPRESSTAG>
Technology Mapping: Elapsed time ==> 0s.570ms
Tech mapping phase: Elapsed time ==> 0s.710ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Placement">
Info: apr.M0002: Analog signal "Net_15" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_16" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_18" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_20" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_21" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_23" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_25" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_26" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_28" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_30" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_31" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_33" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_35" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_36" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_38" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_40" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_41" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_43" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_45" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_46" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_48" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_50" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_51" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_53" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_55" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_56" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_58" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_60" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_61" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_63" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_65" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_66" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_68" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_70" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_71" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_73" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_75" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_76" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_78" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_80" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_81" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_83" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_85" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_86" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_87" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_88" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_89" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_90" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_91" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_92" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_93" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_94" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_95" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_96" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_97" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_98" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_99" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_100" is connected to one terminal only. (App=cydsfit)
Info: apr.M0002: Analog signal "Net_101" is connected to one terminal only. (App=cydsfit)
Initial Analog Placement Results:
IO_4@[IOP=(3)][IoId=(4)] : Brake_1(0) (fixed)
IO_5@[IOP=(3)][IoId=(5)] : Brake_2(0) (fixed)
IO_6@[IOP=(3)][IoId=(6)] : Steering(0) (fixed)
IO_2@[IOP=(3)][IoId=(2)] : Throttle_1(0) (fixed)
IO_3@[IOP=(3)][IoId=(3)] : Throttle_2(0) (fixed)
IO_1@[IOP=(2)][IoId=(1)] : \LCD:LCDPort(0)\ (fixed)
IO_2@[IOP=(2)][IoId=(2)] : \LCD:LCDPort(1)\ (fixed)
IO_3@[IOP=(2)][IoId=(3)] : \LCD:LCDPort(2)\ (fixed)
IO_4@[IOP=(2)][IoId=(4)] : \LCD:LCDPort(3)\ (fixed)
IO_5@[IOP=(2)][IoId=(5)] : \LCD:LCDPort(4)\ (fixed)
IO_6@[IOP=(2)][IoId=(6)] : \LCD:LCDPort(5)\ (fixed)
IO_7@[IOP=(2)][IoId=(7)] : \LCD:LCDPort(6)\ (fixed)
IO_7@[IOP=(15)][IoId=(7)] : \USBUART:Dm(0)\ (fixed)
IO_6@[IOP=(15)][IoId=(6)] : \USBUART:Dp(0)\ (fixed)
SAR[0]@[FFB(SAR,0)] : \ADC_SAR:SAR:ADC_SAR\
Vref[13]@[FFB(Vref,13)] : \ADC_SAR:SAR:vRef_Vdda_1\
USB[0]@[FFB(USB,0)] : \USBUART:USB\
Log: apr.M0058: The analog placement iterative improvement is 44% done. (App=cydsfit)
Analog Placement Results:
IO_4@[IOP=(3)][IoId=(4)] : Brake_1(0) (fixed)
IO_5@[IOP=(3)][IoId=(5)] : Brake_2(0) (fixed)
IO_6@[IOP=(3)][IoId=(6)] : Steering(0) (fixed)
IO_2@[IOP=(3)][IoId=(2)] : Throttle_1(0) (fixed)
IO_3@[IOP=(3)][IoId=(3)] : Throttle_2(0) (fixed)
IO_1@[IOP=(2)][IoId=(1)] : \LCD:LCDPort(0)\ (fixed)
IO_2@[IOP=(2)][IoId=(2)] : \LCD:LCDPort(1)\ (fixed)
IO_3@[IOP=(2)][IoId=(3)] : \LCD:LCDPort(2)\ (fixed)
IO_4@[IOP=(2)][IoId=(4)] : \LCD:LCDPort(3)\ (fixed)
IO_5@[IOP=(2)][IoId=(5)] : \LCD:LCDPort(4)\ (fixed)
IO_6@[IOP=(2)][IoId=(6)] : \LCD:LCDPort(5)\ (fixed)
IO_7@[IOP=(2)][IoId=(7)] : \LCD:LCDPort(6)\ (fixed)
IO_7@[IOP=(15)][IoId=(7)] : \USBUART:Dm(0)\ (fixed)
IO_6@[IOP=(15)][IoId=(6)] : \USBUART:Dp(0)\ (fixed)
SAR[1]@[FFB(SAR,1)] : \ADC_SAR:SAR:ADC_SAR\
Vref[13]@[FFB(Vref,13)] : \ADC_SAR:SAR:vRef_Vdda_1\
USB[0]@[FFB(USB,0)] : \USBUART:USB\

Analog Placement phase: Elapsed time ==> 6s.390ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Routing">
Analog Routing phase: Elapsed time ==> 0s.010ms
</CYPRESSTAG>
<CYPRESSTAG name="Analog Code Generation">
============ Analog Final Answer Routes ============
Dump of CyAnalogRoutingResultsDB
Map of net to items {
  Net: \ADC_SAR:Net_2803\ {
    sar_1_vplus
  }
  Net: Net_7 {
    p3_2
  }
  Net: Net_8 {
    p3_3
  }
  Net: Net_10 {
    p3_4
  }
  Net: Net_11 {
    p3_5
  }
  Net: Net_13 {
    p3_6
  }
  Net: Net_15 {
  }
  Net: Net_16 {
  }
  Net: Net_18 {
  }
  Net: Net_20 {
  }
  Net: Net_21 {
  }
  Net: Net_23 {
  }
  Net: Net_25 {
  }
  Net: Net_26 {
  }
  Net: Net_28 {
  }
  Net: Net_30 {
  }
  Net: Net_31 {
  }
  Net: Net_33 {
  }
  Net: Net_35 {
  }
  Net: Net_36 {
  }
  Net: Net_38 {
  }
  Net: Net_40 {
  }
  Net: Net_41 {
  }
  Net: Net_43 {
  }
  Net: Net_45 {
  }
  Net: Net_46 {
  }
  Net: Net_48 {
  }
  Net: Net_50 {
  }
  Net: Net_51 {
  }
  Net: Net_53 {
  }
  Net: Net_55 {
  }
  Net: Net_56 {
  }
  Net: Net_58 {
  }
  Net: Net_60 {
  }
  Net: Net_61 {
  }
  Net: Net_63 {
  }
  Net: Net_65 {
  }
  Net: Net_66 {
  }
  Net: Net_68 {
  }
  Net: Net_70 {
  }
  Net: Net_71 {
  }
  Net: Net_73 {
  }
  Net: Net_75 {
  }
  Net: Net_76 {
  }
  Net: Net_78 {
  }
  Net: Net_80 {
  }
  Net: Net_81 {
  }
  Net: Net_83 {
  }
  Net: Net_85 {
  }
  Net: Net_86 {
  }
  Net: Net_87 {
  }
  Net: Net_88 {
  }
  Net: Net_89 {
  }
  Net: Net_90 {
  }
  Net: Net_91 {
  }
  Net: Net_92 {
  }
  Net: Net_93 {
  }
  Net: Net_94 {
  }
  Net: Net_95 {
  }
  Net: Net_96 {
  }
  Net: Net_97 {
  }
  Net: Net_98 {
  }
  Net: Net_99 {
  }
  Net: Net_100 {
  }
  Net: Net_101 {
  }
  Net: \ADC_SAR:SAR:Net_126\ {
    sar_1_vrefhi
    sar_1_vminus_x_sar_1_vrefhi
    sar_1_vminus
  }
  Net: \ADC_SAR:SAR:Net_215\ {
  }
  Net: \ADC_SAR:SAR:Net_248\ {
    common_sar_vref_vdda/2
    common_sar_vref_vdda/2_x_sar_1_vref_vdda_vdda_2
    sar_1_vref_vdda_vdda_2
    sar_1_vref_x_sar_1_vref_vdda_vdda_2
    sar_1_vref
  }
  Net: AmuxNet::\ADC_SAR:AMuxHw_2\ {
    sar_1_vplus
    agr4_x_sar_1_vplus
    agr4
    agr4_x_p3_4
    agr5_x_sar_1_vplus
    agr5
    agr5_x_p3_5
    agr6_x_sar_1_vplus
    agr6
    agr6_x_p3_2
    agr7_x_sar_1_vplus
    agr7
    agr7_x_p3_3
    agr6_x_p3_6
    p3_4
    p3_5
    p3_2
    p3_3
    p3_6
  }
}
Map of item to net {
  sar_1_vrefhi                                     -> \ADC_SAR:SAR:Net_126\
  sar_1_vminus_x_sar_1_vrefhi                      -> \ADC_SAR:SAR:Net_126\
  sar_1_vminus                                     -> \ADC_SAR:SAR:Net_126\
  common_sar_vref_vdda/2                           -> \ADC_SAR:SAR:Net_248\
  common_sar_vref_vdda/2_x_sar_1_vref_vdda_vdda_2  -> \ADC_SAR:SAR:Net_248\
  sar_1_vref_vdda_vdda_2                           -> \ADC_SAR:SAR:Net_248\
  sar_1_vref_x_sar_1_vref_vdda_vdda_2              -> \ADC_SAR:SAR:Net_248\
  sar_1_vref                                       -> \ADC_SAR:SAR:Net_248\
  sar_1_vplus                                      -> \ADC_SAR:Net_2803\
  p3_2                                             -> Net_7
  p3_3                                             -> Net_8
  p3_4                                             -> Net_10
  p3_5                                             -> Net_11
  p3_6                                             -> Net_13
  agr4_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr4                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr4_x_p3_4                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr5_x_p3_5                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_p3_2                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7_x_sar_1_vplus                               -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7                                             -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr7_x_p3_3                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
  agr6_x_p3_6                                      -> AmuxNet::\ADC_SAR:AMuxHw_2\
}
Mux Info {
  Mux: \ADC_SAR:AMuxHw_2\ {
     Mouth: \ADC_SAR:Net_2803\
     Guts:  AmuxNet::\ADC_SAR:AMuxHw_2\
     IsSingleSwitching: False
     IsStaticSwitching: True
     IsAtMostOneSwitch: True
    Arm: 0 {
      Net:   Net_7
      Outer: agr6_x_p3_2
      Inner: __open__
      Path {
        p3_2
        agr6_x_p3_2
        agr6
        agr6_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 1 {
      Net:   Net_8
      Outer: agr7_x_p3_3
      Inner: agr7_x_sar_1_vplus
      Path {
        p3_3
        agr7_x_p3_3
        agr7
        agr7_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 2 {
      Net:   Net_10
      Outer: agr4_x_p3_4
      Inner: agr4_x_sar_1_vplus
      Path {
        p3_4
        agr4_x_p3_4
        agr4
        agr4_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 3 {
      Net:   Net_11
      Outer: agr5_x_p3_5
      Inner: agr5_x_sar_1_vplus
      Path {
        p3_5
        agr5_x_p3_5
        agr5
        agr5_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 4 {
      Net:   Net_13
      Outer: agr6_x_p3_6
      Inner: __open__
      Path {
        p3_6
        agr6_x_p3_6
        agr6
        agr6_x_sar_1_vplus
        sar_1_vplus
      }
    }
    Arm: 5 {
      Net:   Net_15
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 6 {
      Net:   Net_16
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 7 {
      Net:   Net_18
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 8 {
      Net:   Net_20
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 9 {
      Net:   Net_21
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 10 {
      Net:   Net_23
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 11 {
      Net:   Net_25
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 12 {
      Net:   Net_26
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 13 {
      Net:   Net_28
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 14 {
      Net:   Net_30
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 15 {
      Net:   Net_31
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 16 {
      Net:   Net_33
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 17 {
      Net:   Net_35
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 18 {
      Net:   Net_36
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 19 {
      Net:   Net_38
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 20 {
      Net:   Net_40
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 21 {
      Net:   Net_41
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 22 {
      Net:   Net_43
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 23 {
      Net:   Net_45
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 24 {
      Net:   Net_46
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 25 {
      Net:   Net_48
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 26 {
      Net:   Net_50
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 27 {
      Net:   Net_51
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 28 {
      Net:   Net_53
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 29 {
      Net:   Net_55
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 30 {
      Net:   Net_56
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 31 {
      Net:   Net_58
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 32 {
      Net:   Net_60
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 33 {
      Net:   Net_61
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 34 {
      Net:   Net_63
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 35 {
      Net:   Net_65
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 36 {
      Net:   Net_66
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 37 {
      Net:   Net_68
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 38 {
      Net:   Net_70
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 39 {
      Net:   Net_71
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 40 {
      Net:   Net_73
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 41 {
      Net:   Net_75
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 42 {
      Net:   Net_76
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 43 {
      Net:   Net_78
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 44 {
      Net:   Net_80
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 45 {
      Net:   Net_81
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 46 {
      Net:   Net_83
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 47 {
      Net:   Net_85
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 48 {
      Net:   Net_86
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 49 {
      Net:   Net_87
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 50 {
      Net:   Net_88
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 51 {
      Net:   Net_89
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 52 {
      Net:   Net_90
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 53 {
      Net:   Net_91
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 54 {
      Net:   Net_92
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 55 {
      Net:   Net_93
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 56 {
      Net:   Net_94
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 57 {
      Net:   Net_95
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 58 {
      Net:   Net_96
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 59 {
      Net:   Net_97
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 60 {
      Net:   Net_98
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 61 {
      Net:   Net_99
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 62 {
      Net:   Net_100
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
    Arm: 63 {
      Net:   Net_101
      Outer: __open__
      Inner: __open__
      Path {
      }
    }
  }
}
Dump of CyP35AnalogRoutingResultsDB
IsVddaHalfUsedForComp = False
IsVddaHalfUsedForSar0 = False
IsVddaHalfUsedForSar1 = True
Analog Code Generation phase: Elapsed time ==> 0s.420ms
</CYPRESSTAG>
<CYPRESSTAG name="Digital Placement">
<CYPRESSTAG name="Detailed placement messages">
I2076: Total run-time: 2.8 sec.

</CYPRESSTAG>
<CYPRESSTAG name="PLD Packing">
<CYPRESSTAG name="PLD Packing Summary" expanded>

------------------------------------------------------------
PLD Packing Summary
------------------------------------------------------------
            Resource Type : Used : Free :  Max :  % Used
    ====================================================
                     PLDs :   24 :   24 :   48 :  50.00%

<CYPRESSTAG name="PLD Statistics">

        PLD Resource Type :     Average/LAB
    =======================================
                   Inputs :            7.38
                   Pterms :            3.67
               Macrocells :            3.17
</CYPRESSTAG>
<CYPRESSTAG name="Packed PLD Contents">
Packed PLD Contents not displayed at this verbose level.</CYPRESSTAG>
</CYPRESSTAG>
PLD Packing: Elapsed time ==> 0s.000ms
</CYPRESSTAG>
<CYPRESSTAG name="Partitioning">
<CYPRESSTAG name="Initial Partitioning Summary">
Initial Partitioning Summary not displayed at this verbose level.</CYPRESSTAG>
<CYPRESSTAG name="Final Partitioning Summary">
Final Partitioning Summary not displayed at this verbose level.</CYPRESSTAG>
Partitioning: Elapsed time ==> 0s.080ms
</CYPRESSTAG>
<CYPRESSTAG name="Simulated Annealing">
Annealing: Elapsed time ==> 0s.000ms
<CYPRESSTAG name="Simulated Annealing Results">
The seed used for moves was 114161200.
Inital cost was 533, final cost is 533 (0.00% improvement).</CYPRESSTAG>
</CYPRESSTAG>
<CYPRESSTAG name="Final Placement Summary">

------------------------------------------------------------
Final Placement Summary
------------------------------------------------------------

       Resource Type :      Count : Avg Inputs : Avg Outputs
    ========================================================
                 UDB :         12 :       7.92 :       6.33
<CYPRESSTAG name="Final Placement Details">
<CYPRESSTAG name="Component Details">

------------------------------------------------------------
Component Placement Details
------------------------------------------------------------
UDB [UDB=(0,0)] is empty.
UDB [UDB=(0,1)] is empty.
UDB [UDB=(0,2)] is empty.
UDB [UDB=(0,3)] is empty.
UDB [UDB=(0,4)] is empty.
UDB [UDB=(0,5)] is empty.
UDB [UDB=(1,0)] is empty.
UDB [UDB=(1,1)] is empty.
UDB [UDB=(1,2)] is empty.
UDB [UDB=(1,3)] is empty.
UDB [UDB=(1,4)] is empty.
UDB [UDB=(1,5)] is empty.
UDB [UDB=(2,0)] contents:
LAB@[UDB=(2,0)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_20\, Mode=(D-Register) @ [UDB=(2,0)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_21\, Mode=(D-Register) @ [UDB=(2,0)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_14\, Mode=(D-Register) @ [UDB=(2,0)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_59\, Mode=(D-Register) @ [UDB=(2,0)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,0)][LB=1] #macrocells=1, #inputs=7, #pterms=1
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_41\, Mode=(D-Register) @ [UDB=(2,0)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

UDB [UDB=(2,1)] contents:
LAB@[UDB=(2,1)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_50\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_22\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_40\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_38\, Mode=(D-Register) @ [UDB=(2,1)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,1)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_55\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_62\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_23\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_9\, Mode=(D-Register) @ [UDB=(2,1)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ (fanout=1)
        Properties               : 
        {
        }
}

synccell: Name =\ADC_SAR:Sync:genblk1[0]:INST\
    PORT MAP (
        clock => ClockBlock_BUS_CLK ,
        in => \ADC_SAR:nrq\ ,
        out => \ADC_SAR:Net_3935\ );
    Properties:
    {
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(2,2)] contents:
LAB@[UDB=(2,2)][LB=0] #macrocells=3, #inputs=4, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=Net_6, Mode=(D-Register) @ [UDB=(2,2)][LB=0][MC=0]
        Total # of inputs        : 2
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
        Main Equation            : 1 pterm
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ * 
              !\ADC_SAR:bSAR_SEQ:nrq_reg\
        );
        Output = Net_6 (fanout=3)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:bSAR_SEQ:nrq_reg\, Mode=(D-Register) @ [UDB=(2,2)][LB=0][MC=1]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)
        Main Equation            : 1 pterm
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\
        );
        Output = \ADC_SAR:bSAR_SEQ:nrq_reg\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:bSAR_SEQ:cnt_enable\, Mode=(Combinatorial) @ [UDB=(2,2)][LB=0][MC=2]
        Total # of inputs        : 2
        Total # of product terms : 1
            Clock Enable: True
        Main Equation            : 1 pterm
        !(
              !Net_5 * !\ADC_SAR:bSAR_SEQ:load_period\
        );
        Output = \ADC_SAR:bSAR_SEQ:cnt_enable\ (fanout=2)
        Properties               : 
        {
        }

    [McSlotId=3]: (empty)
}

LAB@[UDB=(2,2)][LB=1] #macrocells=1, #inputs=3, #pterms=2
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\, Mode=(D-Register) @ [UDB=(2,2)][LB=1][MC=0]
        Total # of inputs        : 3
        Total # of product terms : 2
        List of special equations: 
            Clock  = (ClockBlock_BUS_CLK) => Global
            Clock Enable: True
        Main Equation            : 2 pterms
        (
              \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ * !Net_6
            + \ADC_SAR:Net_3935\
        );
        Output = \ADC_SAR:bSAR_SEQ:bus_clk_nrq_reg\ (fanout=3)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

controlcell: Name =\ADC_SAR:bSAR_SEQ:CtrlReg\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        control_7 => \ADC_SAR:bSAR_SEQ:control_7\ ,
        control_6 => \ADC_SAR:bSAR_SEQ:control_6\ ,
        control_5 => \ADC_SAR:bSAR_SEQ:control_5\ ,
        control_4 => \ADC_SAR:bSAR_SEQ:control_4\ ,
        control_3 => \ADC_SAR:bSAR_SEQ:control_3\ ,
        control_2 => \ADC_SAR:bSAR_SEQ:control_2\ ,
        control_1 => \ADC_SAR:bSAR_SEQ:load_period\ ,
        control_0 => \ADC_SAR:bSAR_SEQ:enable\ );
    Properties:
    {
        cy_ctrl_mode_0 = "00000111"
        cy_ctrl_mode_1 = "00000110"
        cy_ext_reset = 0
        cy_force_order = 1
        cy_init_value = "00000000"
    }
    Clock Polarity: Active High
    Clock Enable: True

UDB [UDB=(2,3)] contents:
LAB@[UDB=(2,3)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_16\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_30\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_46\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_25\, Mode=(D-Register) @ [UDB=(2,3)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(2,3)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_49\, Mode=(D-Register) @ [UDB=(2,3)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_44\, Mode=(D-Register) @ [UDB=(2,3)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ (fanout=1)
        Properties               : 
        {
        }
}

statuscell: Name =\ADC_SAR:bSAR_SEQ:EOCSts\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        status_0 => Net_6 ,
        clk_en => \ADC_SAR:bSAR_SEQ:enable\ );
    Properties:
    {
        cy_force_order = 1
        cy_md_select = "00000001"
    }
    Clock Polarity: Active High
    Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)

UDB [UDB=(2,4)] contents:
LAB@[UDB=(2,4)][LB=0] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_31\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_35\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\, Mode=(D-Register) @ [UDB=(2,4)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]: (empty)
}

LAB@[UDB=(2,4)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]: (empty)
    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_37\, Mode=(D-Register) @ [UDB=(2,4)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(2,5)] contents:
LAB@[UDB=(2,5)][LB=0] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_13\, Mode=(D-Register) @ [UDB=(2,5)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_6\, Mode=(D-Register) @ [UDB=(2,5)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(2,5)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_28\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_7\, Mode=(D-Register) @ [UDB=(2,5)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,0)] contents:
LAB@[UDB=(3,0)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_12\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_19\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_33\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_42\, Mode=(D-Register) @ [UDB=(3,0)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,0)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_58\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_32\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_11\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_29\, Mode=(D-Register) @ [UDB=(3,0)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,1)] contents:
LAB@[UDB=(3,1)][LB=0] #macrocells=4, #inputs=12, #pterms=8
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_10\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_39\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active\, Mode=(Combinatorial) @ [UDB=(3,1)][LB=0][MC=2]
        Total # of inputs        : 9
        Total # of product terms : 5
            Clock Enable: True
        Main Equation            : 5 pterms
        !(
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * \ADC_SAR:ch_addr_5\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * \ADC_SAR:ch_addr_4\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * \ADC_SAR:ch_addr_3\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * \ADC_SAR:ch_addr_2\
            + \ADC_SAR:AMuxHw_2_Decoder_is_active_split\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active\ (fanout=64)
        Properties               : 
        {
            soft = 1
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_18\, Mode=(D-Register) @ [UDB=(3,1)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,1)][LB=1] #macrocells=4, #inputs=10, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_5\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=0]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_5\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_2\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=1]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_2\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_52\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_3\, Mode=(D-Register) @ [UDB=(3,1)][LB=1][MC=3]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_3\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ (fanout=66)
        Properties               : 
        {
        }
}

UDB [UDB=(3,2)] contents:
LAB@[UDB=(3,2)][LB=0] #macrocells=1, #inputs=12, #pterms=8
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_is_active_split\, Mode=(Combinatorial) @ [UDB=(3,2)][LB=0][MC=0]
        Total # of inputs        : 12
        Total # of product terms : 8
            Clock Enable: True
        Main Equation            : 8 pterms
        (
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * !\ADC_SAR:ch_addr_5\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * !\ADC_SAR:ch_addr_4\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * !\ADC_SAR:ch_addr_3\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * !\ADC_SAR:ch_addr_2\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * \ADC_SAR:ch_addr_1\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * !\ADC_SAR:ch_addr_1\
            + !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * \ADC_SAR:ch_addr_0\
            + \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ * !\ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_is_active_split\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]: (empty)
    [McSlotId=3]: (empty)
}

LAB@[UDB=(3,2)][LB=1] #macrocells=4, #inputs=9, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_56\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_8\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_4\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=2]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_4\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ (fanout=66)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_1\, Mode=(D-Register) @ [UDB=(3,2)][LB=1][MC=3]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_1\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ (fanout=65)
        Properties               : 
        {
        }
}

count7cell: Name =\ADC_SAR:bSAR_SEQ:ChannelCounter\
    PORT MAP (
        clock => \ADC_SAR:clock\ ,
        load => \ADC_SAR:bSAR_SEQ:load_period\ ,
        enable => \ADC_SAR:bSAR_SEQ:cnt_enable\ ,
        count_6 => \ADC_SAR:bSAR_SEQ:count_6\ ,
        count_5 => \ADC_SAR:ch_addr_5\ ,
        count_4 => \ADC_SAR:ch_addr_4\ ,
        count_3 => \ADC_SAR:ch_addr_3\ ,
        count_2 => \ADC_SAR:ch_addr_2\ ,
        count_1 => \ADC_SAR:ch_addr_1\ ,
        count_0 => \ADC_SAR:ch_addr_0\ ,
        tc => \ADC_SAR:bSAR_SEQ:cnt_tc\ ,
        clk_en => \ADC_SAR:bSAR_SEQ:enable\ );
    Properties:
    {
        cy_alt_mode = 0
        cy_init_value = "0000000"
        cy_period = "0000100"
        cy_route_en = 1
        cy_route_ld = 1
    }
    Clock Polarity: Active High
    Clock Enable: PosEdge(\ADC_SAR:bSAR_SEQ:enable\)

UDB [UDB=(3,3)] contents:
LAB@[UDB=(3,3)][LB=0] #macrocells=4, #inputs=8, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_51\, Mode=(D-Register) @ [UDB=(3,3)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_old_id_0\, Mode=(D-Register) @ [UDB=(3,3)][LB=0][MC=1]
        Total # of inputs        : 1
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:ch_addr_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_old_id_0\ (fanout=65)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_48\, Mode=(D-Register) @ [UDB=(3,3)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_24\, Mode=(D-Register) @ [UDB=(3,3)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,3)][LB=1] #macrocells=2, #inputs=7, #pterms=2
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_36\, Mode=(D-Register) @ [UDB=(3,3)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_57\, Mode=(D-Register) @ [UDB=(3,3)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]: (empty)
}

UDB [UDB=(3,4)] contents:
LAB@[UDB=(3,4)][LB=0] #macrocells=3, #inputs=7, #pterms=3
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_17\, Mode=(D-Register) @ [UDB=(3,4)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]: (empty)
    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_26\, Mode=(D-Register) @ [UDB=(3,4)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_54\, Mode=(D-Register) @ [UDB=(3,4)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,4)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_5\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_63\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_47\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_15\, Mode=(D-Register) @ [UDB=(3,4)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ (fanout=1)
        Properties               : 
        {
        }
}

UDB [UDB=(3,5)] contents:
LAB@[UDB=(3,5)][LB=0] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_34\, Mode=(D-Register) @ [UDB=(3,5)][LB=0][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\, Mode=(D-Register) @ [UDB=(3,5)][LB=0][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_45\, Mode=(D-Register) @ [UDB=(3,5)][LB=0][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_60\, Mode=(D-Register) @ [UDB=(3,5)][LB=0][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ (fanout=1)
        Properties               : 
        {
        }
}

LAB@[UDB=(3,5)][LB=1] #macrocells=4, #inputs=7, #pterms=4
{
    [McSlotId=0]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_27\, Mode=(D-Register) @ [UDB=(3,5)][LB=1][MC=0]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=1]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_61\, Mode=(D-Register) @ [UDB=(3,5)][LB=1][MC=1]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=2]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_53\, Mode=(D-Register) @ [UDB=(3,5)][LB=1][MC=2]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ (fanout=1)
        Properties               : 
        {
        }

    [McSlotId=3]:     MacroCell: Name=\ADC_SAR:AMuxHw_2_Decoder_one_hot_43\, Mode=(D-Register) @ [UDB=(3,5)][LB=1][MC=3]
        Total # of inputs        : 7
        Total # of product terms : 1
        List of special equations: 
            Clock  = (\ADC_SAR:clock\) => Global
            Clock Enable: True
        Main Equation            : 1 pterm
        (
              \ADC_SAR:AMuxHw_2_Decoder_is_active\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_5\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_4\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_3\ * 
              !\ADC_SAR:AMuxHw_2_Decoder_old_id_2\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_1\ * 
              \ADC_SAR:AMuxHw_2_Decoder_old_id_0\
        );
        Output = \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ (fanout=1)
        Properties               : 
        {
        }
}

Intr hod @ [IntrHod=(0)]: 
  Intr@ [IntrHod=(0)][IntrId=(0)] 
    interrupt: Name =\ADC_SAR:IRQ\
        PORT MAP (
            interrupt => Net_6 );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(1)] 
    interrupt: Name =\USBUART:ep_1\
        PORT MAP (
            interrupt => \USBUART:ept_int_1\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(2)] 
    interrupt: Name =\USBUART:ep_2\
        PORT MAP (
            interrupt => \USBUART:ept_int_2\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(3)] 
    interrupt: Name =\USBUART:ep_3\
        PORT MAP (
            interrupt => \USBUART:ept_int_3\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(12)] 
    interrupt: Name =\USBUART:dp_int\
        PORT MAP (
            interrupt => \USBUART:Net_1010\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(21)] 
    interrupt: Name =\USBUART:sof_int\
        PORT MAP (
            interrupt => Net_1 );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(22)] 
    interrupt: Name =\USBUART:arb_int\
        PORT MAP (
            interrupt => \USBUART:Net_79\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(23)] 
    interrupt: Name =\USBUART:bus_reset\
        PORT MAP (
            interrupt => \USBUART:Net_81\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(24)] 
    interrupt: Name =\USBUART:ep_0\
        PORT MAP (
            interrupt => \USBUART:ept_int_0\ );
        Properties:
        {
            int_type = "10"
        }
  Intr@ [IntrHod=(0)][IntrId=(25)] 
    interrupt: Name =\USBUART:ord_int\
        PORT MAP (
            interrupt => \USBUART:Net_95\ );
        Properties:
        {
            int_type = "10"
        }
Drq hod @ [DrqHod=(0)]: 
  Dma@ [DrqHod=(0)][DrqId=(0)] 
    drqcell: Name =\ADC_SAR:FinalBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3698\ ,
            termin => zero ,
            termout => \ADC_SAR:nrq\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
  Dma@ [DrqHod=(0)][DrqId=(1)] 
    drqcell: Name =\ADC_SAR:TempBuf\
        PORT MAP (
            dmareq => \ADC_SAR:Net_3830\ ,
            termin => zero ,
            termout => \ADC_SAR:Net_3698\ );
        Properties:
        {
            drq_type = "00"
            num_tds = 0
        }
Port 0 is empty
Port 1 is empty
Port 2 contains the following IO cells:
[IoId=1]: 
Pin : Name = \LCD:LCDPort(0)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(0)\__PA ,
        pad => \LCD:LCDPort(0)_PAD\ );
    Properties:
    {
    }

[IoId=2]: 
Pin : Name = \LCD:LCDPort(1)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(1)\__PA ,
        pad => \LCD:LCDPort(1)_PAD\ );
    Properties:
    {
    }

[IoId=3]: 
Pin : Name = \LCD:LCDPort(2)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(2)\__PA ,
        pad => \LCD:LCDPort(2)_PAD\ );
    Properties:
    {
    }

[IoId=4]: 
Pin : Name = \LCD:LCDPort(3)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(3)\__PA ,
        pad => \LCD:LCDPort(3)_PAD\ );
    Properties:
    {
    }

[IoId=5]: 
Pin : Name = \LCD:LCDPort(4)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(4)\__PA ,
        pad => \LCD:LCDPort(4)_PAD\ );
    Properties:
    {
    }

[IoId=6]: 
Pin : Name = \LCD:LCDPort(5)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(5)\__PA ,
        pad => \LCD:LCDPort(5)_PAD\ );
    Properties:
    {
    }

[IoId=7]: 
Pin : Name = \LCD:LCDPort(6)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: NOSYNC
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: CMOS_OUT
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: False
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: DIGITAL
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \LCD:LCDPort(6)\__PA ,
        pad => \LCD:LCDPort(6)_PAD\ );
    Properties:
    {
    }

Port 3 contains the following IO cells:
[IoId=2]: 
Pin : Name = Throttle_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Throttle_1(0)__PA ,
        analog_term => Net_7 ,
        pad => Throttle_1(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_0\ );
    Properties:
    {
    }

[IoId=3]: 
Pin : Name = Throttle_2(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Throttle_2(0)__PA ,
        analog_term => Net_8 ,
        pad => Throttle_2(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_1\ );
    Properties:
    {
    }

[IoId=4]: 
Pin : Name = Brake_1(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Brake_1(0)__PA ,
        analog_term => Net_10 ,
        pad => Brake_1(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_2\ );
    Properties:
    {
    }

[IoId=5]: 
Pin : Name = Brake_2(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Brake_2(0)__PA ,
        analog_term => Net_11 ,
        pad => Brake_2(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_3\ );
    Properties:
    {
    }

[IoId=6]: 
Pin : Name = Steering(0)
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: ANALOG
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => Steering(0)__PA ,
        analog_term => Net_13 ,
        pad => Steering(0)_PAD ,
        input => \ADC_SAR:AMuxHw_2_Decoder_one_hot_4\ );
    Properties:
    {
    }

Port 4 is empty
Port 5 is empty
Port 6 is empty
Port 12 is empty
Port 15 generates interrupt for logical port:
    logicalport: Name =\USBUART:Dp\
        PORT MAP (
            in_clock_en => one ,
            in_reset => zero ,
            out_clock_en => one ,
            out_reset => zero ,
            interrupt => \USBUART:Net_1010\ ,
            in_clock => ClockBlock_BUS_CLK );
        Properties:
        {
            drive_mode = "000"
            ibuf_enabled = "0"
            id = "c39ef993-d787-4c0c-8ad6-c0c81f866442/618a72fc-5ddd-4df5-958f-a3d55102db42"
            init_dr_st = "0"
            input_buffer_sel = "00"
            input_clk_en = 0
            input_sync = "1"
            input_sync_mode = "0"
            intr_mode = "10"
            invert_in_clock = 0
            invert_in_clock_en = 0
            invert_in_reset = 0
            invert_out_clock = 0
            invert_out_clock_en = 0
            invert_out_reset = 0
            io_voltage = ""
            layout_mode = "CONTIGUOUS"
            oe_conn = "0"
            oe_reset = 0
            oe_sync = "0"
            output_clk_en = 0
            output_clock_mode = "0"
            output_conn = "0"
            output_mode = "0"
            output_reset = 0
            output_sync = "0"
            ovt_hyst_trim = "0"
            ovt_needed = "0"
            ovt_slew_control = "00"
            pa_in_clock = -1
            pa_in_clock_en = -1
            pa_in_reset = -1
            pa_out_clock = -1
            pa_out_clock_en = -1
            pa_out_reset = -1
            pin_aliases = ""
            pin_mode = "I"
            por_state = 4
            port_alias_group = ""
            port_alias_required = 0
            sio_group_cnt = 0
            sio_hifreq = ""
            sio_hyst = "1"
            sio_ibuf = "00000000"
            sio_info = "00"
            sio_obuf = "00000000"
            sio_refsel = "00000000"
            sio_vtrip = "00000000"
            slew_rate = "0"
            spanning = 0
            sw_only = 0
            use_annotation = "0"
            vtrip = "00"
            width = 1
        }
    and contains the following IO cells:
[IoId=6]: 
Pin : Name = \USBUART:Dp(0)\
    Attributes:
        In Group/Port: True
        In Sync Option: SYNC
        Out Sync Option: AUTO
        Interrupt generated: True
        Interrupt mode: FALLING
        Drive mode: HI_Z_ANALOG
        VTrip: CMOS
        Slew: FAST
        Input Sync needed: True
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: False
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: True
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: USB_D_PLUS
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \USBUART:Dp(0)\__PA ,
        analog_term => \USBUART:Net_1000\ ,
        pad => \USBUART:Dp(0)_PAD\ );
    Properties:
    {
    }

[IoId=7]: 
Pin : Name = \USBUART:Dm(0)\
    Attributes:
        In Group/Port: True
        In Sync Option: AUTO
        Out Sync Option: AUTO
        Interrupt generated: False
        Interrupt mode: NONE
        Drive mode: HI_Z_ANALOG
        VTrip: EITHER
        Slew: FAST
        Input Sync needed: False
        Output Sync needed: False
        SC shield enabled: False
        POR State: ANY
        LCD Mode: COMMON
        Register Mode: RegComb
        CaSense Mode: NEITHER
        Treat as pin: True
        Is OE Registered: False
        Uses Analog: True
        Can contain Digital: False
        Is SIO: False
        SIO Output Buf: NONREGULATED
        SIO Input Buf: SINGLE_ENDED
        SIO HiFreq: LOW
        SIO Hyst: DISABLED
        SIO Vtrip: MULTIPLIER_0_5
        SIO RefSel: VCC_IO
        Required Capabilitites: USB_D_MINUS
        Initial Value: 0
        IO Voltage: 0
    PORT MAP (
        pa_out => \USBUART:Dm(0)\__PA ,
        analog_term => \USBUART:Net_597\ ,
        pad => \USBUART:Dm(0)_PAD\ );
    Properties:
    {
    }

CAN Fixed Block group 0: empty
Cache group 0: empty
CapSense group 0: empty
Clock group 0: 
    Clock Block @ [FFB(Clock,0)]: 
    clockblockcell: Name =ClockBlock
        PORT MAP (
            clk_bus_glb => ClockBlock_BUS_CLK ,
            clk_bus => ClockBlock_BUS_CLK_local ,
            clk_sync => ClockBlock_MASTER_CLK ,
            clk_32k_xtal => ClockBlock_XTAL_32KHZ ,
            xtal => ClockBlock_XTAL ,
            ilo => ClockBlock_ILO ,
            clk_100k => ClockBlock_100k ,
            clk_1k => ClockBlock_1k ,
            clk_32k => ClockBlock_32k ,
            pllout => ClockBlock_PLL_OUT ,
            imo => ClockBlock_IMO ,
            dclk_glb_0 => \ADC_SAR:clock\ ,
            dclk_0 => \ADC_SAR:clock_local\ );
        Properties:
        {
        }
Comparator Fixed Block group 0: empty
DFB Fixed Block group 0: empty
DSM Fixed Block group 0: empty
Decimator Fixed Block group 0: empty
EMIF Fixed Block group 0: empty
I2C Fixed Block group 0: empty
LCD Fixed Block group 0: empty
LVD group 0: empty
PM group 0: empty
SC Fixed Block group 0: empty
SPC group 0: empty
Timer Fixed Block group 0: empty
USB Fixed Block group 0: 
    USB Block @ [FFB(USB,0)]: 
    usbcell: Name =\USBUART:USB\
        PORT MAP (
            dp => \USBUART:Net_1000\ ,
            dm => \USBUART:Net_597\ ,
            sof_int => Net_1 ,
            arb_int => \USBUART:Net_79\ ,
            usb_int => \USBUART:Net_81\ ,
            ept_int_8 => \USBUART:ept_int_8\ ,
            ept_int_7 => \USBUART:ept_int_7\ ,
            ept_int_6 => \USBUART:ept_int_6\ ,
            ept_int_5 => \USBUART:ept_int_5\ ,
            ept_int_4 => \USBUART:ept_int_4\ ,
            ept_int_3 => \USBUART:ept_int_3\ ,
            ept_int_2 => \USBUART:ept_int_2\ ,
            ept_int_1 => \USBUART:ept_int_1\ ,
            ept_int_0 => \USBUART:ept_int_0\ ,
            ord_int => \USBUART:Net_95\ ,
            dma_req_7 => \USBUART:dma_req_7\ ,
            dma_req_6 => \USBUART:dma_req_6\ ,
            dma_req_5 => \USBUART:dma_req_5\ ,
            dma_req_4 => \USBUART:dma_req_4\ ,
            dma_req_3 => \USBUART:dma_req_3\ ,
            dma_req_2 => \USBUART:dma_req_2\ ,
            dma_req_1 => \USBUART:dma_req_1\ ,
            dma_req_0 => \USBUART:dma_req_0\ ,
            dma_termin => \USBUART:Net_824\ );
        Properties:
        {
            cy_registers = ""
        }
VIDAC Fixed Block group 0: empty
Opamp Fixed Block group 0: empty
CapSense Buffer group 0: empty
Vref group 0: 
    Vref Block @ [FFB(Vref,13)]: 
    vrefcell: Name =\ADC_SAR:SAR:vRef_Vdda_1\
        PORT MAP (
            vout => \ADC_SAR:SAR:Net_248\ );
        Properties:
        {
            autoenable = 1
            guid = "4720866E-BC14-478d-B8A0-3E44F38CADAC"
            ignoresleep = 0
            name = "Vdda/2"
        }
LPF Fixed Block group 0: empty
SAR Fixed Block group 0: 
    SAR @ [FFB(SAR,1)]: 
    sarcell: Name =\ADC_SAR:SAR:ADC_SAR\
        PORT MAP (
            vplus => \ADC_SAR:Net_2803\ ,
            vminus => \ADC_SAR:SAR:Net_126\ ,
            ext_pin => \ADC_SAR:SAR:Net_215\ ,
            vrefhi_out => \ADC_SAR:SAR:Net_126\ ,
            vref => \ADC_SAR:SAR:Net_248\ ,
            clk_udb => \ADC_SAR:clock_local\ ,
            irq => \ADC_SAR:SAR:Net_252\ ,
            next => Net_5 ,
            data_out_udb_11 => \ADC_SAR:SAR:Net_207_11\ ,
            data_out_udb_10 => \ADC_SAR:SAR:Net_207_10\ ,
            data_out_udb_9 => \ADC_SAR:SAR:Net_207_9\ ,
            data_out_udb_8 => \ADC_SAR:SAR:Net_207_8\ ,
            data_out_udb_7 => \ADC_SAR:SAR:Net_207_7\ ,
            data_out_udb_6 => \ADC_SAR:SAR:Net_207_6\ ,
            data_out_udb_5 => \ADC_SAR:SAR:Net_207_5\ ,
            data_out_udb_4 => \ADC_SAR:SAR:Net_207_4\ ,
            data_out_udb_3 => \ADC_SAR:SAR:Net_207_3\ ,
            data_out_udb_2 => \ADC_SAR:SAR:Net_207_2\ ,
            data_out_udb_1 => \ADC_SAR:SAR:Net_207_1\ ,
            data_out_udb_0 => \ADC_SAR:SAR:Net_207_0\ ,
            eof_udb => \ADC_SAR:Net_3830\ );
        Properties:
        {
            cy_registers = ""
        }

Blocks not positioned by the digital component placer:
    Amux Block @ <No Location>: 
    amuxcell: Name =\ADC_SAR:AMuxHw_2\
        PORT MAP (
            muxin_63 => Net_101 ,
            muxin_62 => Net_100 ,
            muxin_61 => Net_99 ,
            muxin_60 => Net_98 ,
            muxin_59 => Net_97 ,
            muxin_58 => Net_96 ,
            muxin_57 => Net_95 ,
            muxin_56 => Net_94 ,
            muxin_55 => Net_93 ,
            muxin_54 => Net_92 ,
            muxin_53 => Net_91 ,
            muxin_52 => Net_90 ,
            muxin_51 => Net_89 ,
            muxin_50 => Net_88 ,
            muxin_49 => Net_87 ,
            muxin_48 => Net_86 ,
            muxin_47 => Net_85 ,
            muxin_46 => Net_83 ,
            muxin_45 => Net_81 ,
            muxin_44 => Net_80 ,
            muxin_43 => Net_78 ,
            muxin_42 => Net_76 ,
            muxin_41 => Net_75 ,
            muxin_40 => Net_73 ,
            muxin_39 => Net_71 ,
            muxin_38 => Net_70 ,
            muxin_37 => Net_68 ,
            muxin_36 => Net_66 ,
            muxin_35 => Net_65 ,
            muxin_34 => Net_63 ,
            muxin_33 => Net_61 ,
            muxin_32 => Net_60 ,
            muxin_31 => Net_58 ,
            muxin_30 => Net_56 ,
            muxin_29 => Net_55 ,
            muxin_28 => Net_53 ,
            muxin_27 => Net_51 ,
            muxin_26 => Net_50 ,
            muxin_25 => Net_48 ,
            muxin_24 => Net_46 ,
            muxin_23 => Net_45 ,
            muxin_22 => Net_43 ,
            muxin_21 => Net_41 ,
            muxin_20 => Net_40 ,
            muxin_19 => Net_38 ,
            muxin_18 => Net_36 ,
            muxin_17 => Net_35 ,
            muxin_16 => Net_33 ,
            muxin_15 => Net_31 ,
            muxin_14 => Net_30 ,
            muxin_13 => Net_28 ,
            muxin_12 => Net_26 ,
            muxin_11 => Net_25 ,
            muxin_10 => Net_23 ,
            muxin_9 => Net_21 ,
            muxin_8 => Net_20 ,
            muxin_7 => Net_18 ,
            muxin_6 => Net_16 ,
            muxin_5 => Net_15 ,
            muxin_4 => Net_13 ,
            muxin_3 => Net_11 ,
            muxin_2 => Net_10 ,
            muxin_1 => Net_8 ,
            muxin_0 => Net_7 ,
            hw_ctrl_en_63 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_63\ ,
            hw_ctrl_en_62 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_62\ ,
            hw_ctrl_en_61 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_61\ ,
            hw_ctrl_en_60 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_60\ ,
            hw_ctrl_en_59 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_59\ ,
            hw_ctrl_en_58 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_58\ ,
            hw_ctrl_en_57 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_57\ ,
            hw_ctrl_en_56 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_56\ ,
            hw_ctrl_en_55 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_55\ ,
            hw_ctrl_en_54 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_54\ ,
            hw_ctrl_en_53 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_53\ ,
            hw_ctrl_en_52 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_52\ ,
            hw_ctrl_en_51 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_51\ ,
            hw_ctrl_en_50 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_50\ ,
            hw_ctrl_en_49 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_49\ ,
            hw_ctrl_en_48 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_48\ ,
            hw_ctrl_en_47 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_47\ ,
            hw_ctrl_en_46 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_46\ ,
            hw_ctrl_en_45 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_45\ ,
            hw_ctrl_en_44 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_44\ ,
            hw_ctrl_en_43 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_43\ ,
            hw_ctrl_en_42 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_42\ ,
            hw_ctrl_en_41 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_41\ ,
            hw_ctrl_en_40 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_40\ ,
            hw_ctrl_en_39 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_39\ ,
            hw_ctrl_en_38 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_38\ ,
            hw_ctrl_en_37 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_37\ ,
            hw_ctrl_en_36 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_36\ ,
            hw_ctrl_en_35 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_35\ ,
            hw_ctrl_en_34 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_34\ ,
            hw_ctrl_en_33 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_33\ ,
            hw_ctrl_en_32 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_32\ ,
            hw_ctrl_en_31 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_31\ ,
            hw_ctrl_en_30 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_30\ ,
            hw_ctrl_en_29 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_29\ ,
            hw_ctrl_en_28 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_28\ ,
            hw_ctrl_en_27 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_27\ ,
            hw_ctrl_en_26 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_26\ ,
            hw_ctrl_en_25 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_25\ ,
            hw_ctrl_en_24 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_24\ ,
            hw_ctrl_en_23 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_23\ ,
            hw_ctrl_en_22 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_22\ ,
            hw_ctrl_en_21 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_21\ ,
            hw_ctrl_en_20 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_20\ ,
            hw_ctrl_en_19 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_19\ ,
            hw_ctrl_en_18 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_18\ ,
            hw_ctrl_en_17 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_17\ ,
            hw_ctrl_en_16 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_16\ ,
            hw_ctrl_en_15 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_15\ ,
            hw_ctrl_en_14 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_14\ ,
            hw_ctrl_en_13 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_13\ ,
            hw_ctrl_en_12 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_12\ ,
            hw_ctrl_en_11 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_11\ ,
            hw_ctrl_en_10 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_10\ ,
            hw_ctrl_en_9 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_9\ ,
            hw_ctrl_en_8 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_8\ ,
            hw_ctrl_en_7 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_7\ ,
            hw_ctrl_en_6 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_6\ ,
            hw_ctrl_en_5 => \ADC_SAR:AMuxHw_2_Decoder_one_hot_5\ ,
            vout => \ADC_SAR:Net_2803\ );
        Properties:
        {
            api_type = 2
            connect_mode = 1
            cy_registers = ""
            hw_control = 1
            init_mux_sel = "0000000000000000000000000000000000000000000000000000000000000000"
            muxin_width = 64
            one_active = 1
        }
</CYPRESSTAG>
<CYPRESSTAG name="Port Configuration Details">

------------------------------------------------------------
Port Configuration report
------------------------------------------------------------
     |     |       | Interrupt |                  |                  | 
Port | Pin | Fixed |      Type |       Drive Mode |             Name | Connections
-----+-----+-------+-----------+------------------+------------------+---------------------------------------------------------
   2 |   1 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(0)\ | 
     |   2 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(1)\ | 
     |   3 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(2)\ | 
     |   4 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(3)\ | 
     |   5 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(4)\ | 
     |   6 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(5)\ | 
     |   7 |     * |      NONE |         CMOS_OUT | \LCD:LCDPort(6)\ | 
-----+-----+-------+-----------+------------------+------------------+---------------------------------------------------------
   3 |   2 |     * |      NONE |      HI_Z_ANALOG |    Throttle_1(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_0\), Analog(Net_7)
     |   3 |     * |      NONE |      HI_Z_ANALOG |    Throttle_2(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_1\), Analog(Net_8)
     |   4 |     * |      NONE |      HI_Z_ANALOG |       Brake_1(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_2\), Analog(Net_10)
     |   5 |     * |      NONE |      HI_Z_ANALOG |       Brake_2(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_3\), Analog(Net_11)
     |   6 |     * |      NONE |      HI_Z_ANALOG |      Steering(0) | In(\ADC_SAR:AMuxHw_2_Decoder_one_hot_4\), Analog(Net_13)
-----+-----+-------+-----------+------------------+------------------+---------------------------------------------------------
  15 |   6 |       |   FALLING |      HI_Z_ANALOG |  \USBUART:Dp(0)\ | Analog(\USBUART:Net_1000\)
     |   7 |       |      NONE |      HI_Z_ANALOG |  \USBUART:Dm(0)\ | Analog(\USBUART:Net_597\)
-------------------------------------------------------------------------------------------------------------------------------
</CYPRESSTAG>
</CYPRESSTAG>
</CYPRESSTAG>
Digital component placer commit/Report: Elapsed time ==> 0s.000ms
Digital Placement phase: Elapsed time ==> 3s.080ms
</CYPRESSTAG>
<CYPRESSTAG name="Digital Routing">
Routing successful.
Digital Routing phase: Elapsed time ==> 3s.074ms
</CYPRESSTAG>
<CYPRESSTAG name="Bitstream and API generation">
Bitstream and API generation phase: Elapsed time ==> 0s.210ms
</CYPRESSTAG>
<CYPRESSTAG name="Bitstream verification">
Bitstream verification phase: Elapsed time ==> 0s.070ms
</CYPRESSTAG>
<CYPRESSTAG name="Static timing analysis">
Timing report is in Node-Elephant-Terminal_timing.html.
Static timing analysis phase: Elapsed time ==> 0s.430ms
</CYPRESSTAG>
<CYPRESSTAG name="Data reporting">
Data reporting phase: Elapsed time ==> 0s.000ms
</CYPRESSTAG>
<CYPRESSTAG name="Database update...">
Design database save phase: Elapsed time ==> 0s.220ms
</CYPRESSTAG>
cydsfit: Elapsed time ==> 14s.654ms
</CYPRESSTAG>
Fitter phase: Elapsed time ==> 14s.704ms
API generation phase: Elapsed time ==> 1s.408ms
Dependency generation phase: Elapsed time ==> 0s.000ms
Cleanup phase: Elapsed time ==> 0s.010ms
